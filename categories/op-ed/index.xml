<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Op-ed on ssaraf</title>
    <link>https://ssaraf.com/categories/op-ed/</link>
    <description>Recent content in Op-ed on ssaraf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Nov 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ssaraf.com/categories/op-ed/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Crypto in the cave</title>
      <link>https://ssaraf.com/crypto_in_the_cave/</link>
      <pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/crypto_in_the_cave/</guid>
      <description>&lt;p&gt;Crypto seems to be a great divider amongst my friends and colleagues. Some think of it as the next step in human innovation, the future of finance, a political and social movement, and so on.&lt;/p&gt;
&lt;p&gt;Others, including myself, see it as a horrible mixture of Ponzi scheme, MLM campaign, and suicide cult.&lt;/p&gt;
&lt;p&gt;From a technical perspective, it doesn&amp;rsquo;t seem to provide much utility over existing solutions - no software engineer chooses a ledger over, say, a database. You will have a hard time finding a company &amp;ldquo;built on crypto&amp;rdquo; that is not in some way also selling crypto.&lt;/p&gt;
&lt;p&gt;From a financial perspective, it seems to be a way of avoiding well-justified regulation (and is thus a great place to take old financial tactics like wash trading and re-use them on a new generation of fools). Since bitcoin and its ilk don&amp;rsquo;t represent economic activity like stocks / bonds, it seems that its only intrinsic value is to sell it to someone who thinks they can sell it for more.&lt;/p&gt;
&lt;p&gt;My minimal economics experience makes me skeptical of deflationary currencies. Some folks compare investing in crypto to investing in gold. But I think investing in gold is stupid too - it only makes sense as a hedge against other trades. Crypto is correlated with the market, but more volatile, so would make a bad hedge.&lt;/p&gt;
&lt;p&gt;The only thing crypto seems to do well is enrich a small group of people who created whatever token / NFT thing is popular, and a larger group of VCs and tech companies &amp;ldquo;selling shovels&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;That said, gold, like stocks and everything else at the moment, trades far above intrinsic value. Why not have a meme token that trades for more than the market caps of half the S&amp;amp;P?&lt;/p&gt;
&lt;p&gt;So, while I think crypto is stupid, I could be wrong. My point isn&amp;rsquo;t about crypto specifically, but about why my friends disagree about it.&lt;/p&gt;
&lt;p&gt;People I know used to segment the way you&amp;rsquo;d expect if you were a political reporter in the early 2000s.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s the city dwelling, tech / finance / law / medicine working, IPA-drinking, educated crowd. They invite people to dinner parties with multiple appetizers. They only vaguely care about sports. They vote for Democrats until they get rich, after which they become libertarian.&lt;/p&gt;
&lt;p&gt;Then there&amp;rsquo;s the &amp;ldquo;flyover country&amp;rdquo; dwelling, blue collar job working, gun wielding, street smart crowd. They have kids early. They have barbeques and watch football. They vote for Republicans as a rule but only vaguely care about politics.&lt;/p&gt;
&lt;p&gt;For more thoughts on these two groups, see this piece.&lt;/p&gt;
&lt;p&gt;Doesn&amp;rsquo;t the above seem incredibly old fashioned? The first is now a &amp;ldquo;woke mob&amp;rdquo; who will very carefully eat &amp;ldquo;organic&amp;rdquo; food and have strong opinions about gender identification on your Zoom username, and the second proudly wears MAGA hats but not face masks and has strong opinions about post-op trans women using female bathrooms.&lt;/p&gt;
&lt;p&gt;If this was just about political polarization, that would be one thing. But now the reality distortion field of the most recent elections seem to have rubbed off on everything that we discuss. Crypto is the latest example of many in which the questions are insane, and up is down, and black is white. Conversations about almost anything are nerve-wracking - even writing the above makes me worry about either being cancelled or summoning some type of red-hat mob.&lt;/p&gt;
&lt;p&gt;And the worst thing is that, generally speaking, I don&amp;rsquo;t care about most of it. I agree that much of it is important to other people. But not to me, except in the vague sense of wanting to talk about something other than the weather - these subjects come up most often in conversation. I feel guilty about not caring enough.&lt;/p&gt;
&lt;p&gt;For topics that I do care about, I see a streak of subjective, anecdotal, vague thinking which is worrisome, since it seems to be coming from all angles.&lt;/p&gt;
&lt;p&gt;For example, my left-leaning friends are all vaccinated, but most (if not all) will eat at restaurants indoors that have a &amp;ldquo;mask on&amp;rdquo; policy. Aerosolized viruses transmit just fine while you&amp;rsquo;re eating - putting the mask on while talking but taking it off to eat food is stupid. If you&amp;rsquo;re going to take the mask off to eat, keep it off. Or eat outdoors.&lt;/p&gt;
&lt;p&gt;Most of the current administration&amp;rsquo;s tactics around school closures, giving vaccines to children, etc have erred irrationally conservative. This leads parents to do well-justified things like smuggle their 11 and 4 year old kids to get the vaccine earlier than they &amp;ldquo;should&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;On the right, there&amp;rsquo;s almost too many examples to name. Perhaps the proud anti-vax and anti-mask groups are the easiest to pick on.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m reminded of the allegory of the cave. We&amp;rsquo;re all seeing shadows on the wall, and nobody knows what&amp;rsquo;s real.&lt;/p&gt;
&lt;p&gt;If you wanted to find out the truth about crypto, where would you go? Who would you ask? If you wanted to find the truth about vaccine effectiveness, where would you read it?&lt;/p&gt;
&lt;p&gt;I think the problem is that no one knows. There is no authority that can be trusted to give accurate, practical answers to these questions. The CDC, for example, will give accurate but not risk-adjusted recommendations. For example, early on in the pandemic, they were wrong about the utility of masks.&lt;/p&gt;
&lt;p&gt;Some prominent folks will give closer to optimal recommendations, but their voices are diluted along with all the other loud people, and the reason they have a voice is, forgive me, they&amp;rsquo;re good at Twitter, or appearing on talk shows. Do we really think that the best authority on any subject is the one that emerges from the cauldron there? Or are we just picking the top dog in a mangy pack? For every Zeynep there is a Joe Rogan, and we can&amp;rsquo;t ignore that they emerged in the last few years in roughly the same way. How do we know which is which?&lt;/p&gt;
&lt;p&gt;It isn&amp;rsquo;t enough to &amp;ldquo;study the science&amp;rdquo; either. You can read here about a detailed meta-analysis done by Scott Alexander on ivermectin, with the conclusion that it &lt;em&gt;might&lt;/em&gt; help patients with COVID, so long as they&amp;rsquo;re in a country where the populace has worms and therefore a dewormer helps improve clinical outcomes.&lt;/p&gt;
&lt;p&gt;My point isn&amp;rsquo;t Scott&amp;rsquo;s specific conclusion but the type of analysis that&amp;rsquo;s needed to interpret even a &lt;strong&gt;meta analysis&lt;/strong&gt; of scientific studies on a subject of immense practical value to all of humanity for the last two years. No one could possibly have the time to do the &amp;ldquo;from first principles&amp;rdquo; analytical approach in every area, so you have to read some one else&amp;rsquo;s summary, and right there you&amp;rsquo;re depending on that person&amp;rsquo;s credibility and platform.&lt;/p&gt;
&lt;p&gt;Before now, credibility and platform were determined by a small group of elite institutions, on both the left and right. It didn&amp;rsquo;t matter if you were conservative or liberal, the WSJ and NYT would &lt;em&gt;retract incorrect pieces&lt;/em&gt; if they were found to be misleading in even the smallest way. Scientific studies were published in prominent journals, and you would suffer professional consequences if you put something inaccurate in a paper.&lt;/p&gt;
&lt;p&gt;People who succeeded at those institutions were academically or professionally qualified, so you could trust what you read. And while those organizations still exist and are present in today&amp;rsquo;s discourse, it feels like they&amp;rsquo;re drowned out from the mass of loud voices on more &amp;ldquo;decentralized&amp;rdquo; platforms like Twitter, Substack, Youtube, etc.&lt;/p&gt;
&lt;p&gt;No one issues a &amp;ldquo;retraction&amp;rdquo; on Twitter, unless the mob comes after them. And even in those circumstances, the person recanting isn&amp;rsquo;t doing so because of what&amp;rsquo;s factually accurate, but because they need the mob - it&amp;rsquo;s their platform, after all.&lt;/p&gt;
&lt;p&gt;And so rather than accuracy or truth we go for who can say the most interesting things, or the funniest jokes, or who can build an audience, which are different sorts of skill sets. You can&amp;rsquo;t even find the humble truth-seekers because these platforms only throw popular people at you to follow, not those poor shmucks tweeting to &amp;lt;100 friends.&lt;/p&gt;
&lt;p&gt;And it&amp;rsquo;s in that world where people are making new digital currencies and the mob is buying them up and they go up in value and more people join the mob to get in on the action, and soon you have an NFT of a picture of Elon Musk worth more money than can even be conceived of, but doesn&amp;rsquo;t do anything except reflect its own ever-increasing demand and fixed supply.&lt;/p&gt;
&lt;p&gt;Crypto can go to the moon, for all I care. I wish those people well. But I want a place to read about it that will put facts above whatever religion they&amp;rsquo;ve adopted. I worry that I have my own blind spots - things that I believe that aren&amp;rsquo;t really true, but I&amp;rsquo;m in a weird self-reinforcing bubble that makes me believe them stronger and stronger. And I&amp;rsquo;m not sure where to go.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Building a personal brand</title>
      <link>https://ssaraf.com/building_a_personal_brand/</link>
      <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/building_a_personal_brand/</guid>
      <description>&lt;p&gt;&lt;em&gt;One logistical update - I&amp;rsquo;ve centralized the posts that would usually go to the sudopoint or SQL blog to this one. If you were subscribed to sudopoint or on my SQL class mailing list, you&amp;rsquo;re now subscribed here.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I&amp;rsquo;m surprised to see many of my friends starting to build public online presences. Previously they didn&amp;rsquo;t seem to want to. Why?&lt;/p&gt;
&lt;p&gt;Part of the reason seems to be that many of them are starting companies, and CEOs often have to do a lot of marketing. Without a pre-existing marketing machine, they try to bootstrap one from their personal social accounts.&lt;/p&gt;
&lt;p&gt;But I think it&amp;rsquo;s more than that, and I think there&amp;rsquo;s a link to some of the earlier thoughts on this blog related to &lt;a href=&#34;https://ssaraf.com/keynesian_workweek&#34;&gt;work week&lt;/a&gt;, and building &lt;a href=&#34;https://ssaraf.com/side_projects&#34;&gt;side projects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We are each our own little company now.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That converts &amp;ldquo;full time employment&amp;rdquo; into something that looks a lot more like one larger company subcontracting work to a smaller company (You Inc).&lt;/p&gt;
&lt;p&gt;It also explains why employers increasingly are looking to reduce global benefits in favor of those that the individual employee can decide how to wrangle. Instead of insurance benefits, pay enough salary that employees can buy on the exchange. Instead of dumbbells in the office, a stipend for doing whatever workouts you want. Instead of 8 hours a day each day, spend however much time you need to get the job done.&lt;/p&gt;
&lt;p&gt;It also explains why &lt;em&gt;getting&lt;/em&gt; a job is such a weird experience. Almost no one who gets a job gets it by applying for it via a website. Instead it&amp;rsquo;s about relationships you&amp;rsquo;ve built - effectively, how well you can market yourself as the best subcontractor for the position. Sure, the company doesn&amp;rsquo;t &lt;em&gt;call you&lt;/em&gt; a contractor, but you can end the contract tomorrow and go start another one, just like a contractor can.&lt;/p&gt;
&lt;p&gt;Gig economy workers already knew about all of this, of course. But this emerging independence has usually been painted as primarily an advantage to employers, who get away with providing fewer perks to a captive employment base. I think the opposite - this is an advantage, though largely unexploited, for employees.&lt;/p&gt;
&lt;p&gt;For example, there&amp;rsquo;s a large &lt;a href=&#34;https://overemployed.com/&#34;&gt;community of people&lt;/a&gt; that now work two &amp;ldquo;full time&amp;rdquo; jobs. For those of us just working the one, we know that it&amp;rsquo;s perfectly possible (in fact, likely) that you only get 10 or 20 hours of productive work in for an employer per week. For highly circumscribed roles, with concrete independent deliverables (i.e. non management), getting multiple jobs is a brilliant approach to maximize your income.&lt;/p&gt;
&lt;p&gt;Meanwhile, successful companies are getting smaller. And not just startups - I mean regular companies can be built &amp;ldquo;off the shelf&amp;rdquo; and so simply require fewer personnel to get a product to market. The rise of the Indie Hacker movement has been astronomical, and I think will only continue to swell. Journalists are leaving newspapers to start substacks, where they can earn money directly, on their own.&lt;/p&gt;
&lt;p&gt;I suspect that the maximally employable people will be those that take advantage of this structure to market themselves effectively. The main problem is that most of the people I know doing this are, bluntly, super boring.&lt;/p&gt;
&lt;p&gt;I occasonally peruse twitter, and even the &amp;ldquo;intelligent tech&amp;rdquo; people are primarily posting what I would consider to be absolute drivel. Epigrams that would drive Confucius crazy. Statements that seem controversial but are really just paper thin assessments of the obvious. They are effectively text-only rorschach images meant to get forwarded around as simply the next version of chain letters.&lt;/p&gt;
&lt;p&gt;Most of these posters are pretty thoughtful people, many of whom are brilliant writers. But they need to use twitter / linkedin / facebook as sort of a marketing mechanism to catch a little bit of attention from the vast sea of internet fish. Which they then funnel into whatever scheme they&amp;rsquo;re peddling - youtube channels, substack subscriptions, try my startup, etc.&lt;/p&gt;
&lt;p&gt;This blog isn&amp;rsquo;t an exception, but I can at least be honest about that.&lt;/p&gt;
&lt;p&gt;More importantly, I think it has implications for those of you reading who don&amp;rsquo;t already have an online presence. All signs point to you being at a disadvantage compared to those who have shamelessly sleazed themselves out on social media. Probably not in your current role, but certainly when looking for a new one, or starting a project that requires a global audience.&lt;/p&gt;
&lt;p&gt;And yet, the people who I most respect in my past workplaces, who are often the wisest, most thoughtful people, they often have no meaningful online persona. They don&amp;rsquo;t link to tweets. They barely watch youtube. As far as I can tell, many of them don&amp;rsquo;t even have linkedin profiles.&lt;/p&gt;
&lt;p&gt;That makes me think that as loud and obnoxious as the current online discourse is, the vast majority of people in real life are not writing online at all, and most (especially the most talented and experienced) are barely reading it. They know it&amp;rsquo;s mostly crap.&lt;/p&gt;
&lt;p&gt;Perhaps it is still early in the game. I wonder if participating in it will actually be an advantage, or instead an indicator of which people clumsily jumped into a fad that will eventually fade.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Open source vs paid software</title>
      <link>https://ssaraf.com/5_hours_a_week/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/5_hours_a_week/</guid>
      <description>&lt;p&gt;There was a &lt;a href=&#34;https://news.ycombinator.com/item?id=25032105&#34;&gt;very interesting post&lt;/a&gt; on Hacker News about an open source developer named Marak. Marak declared that he would do no more work on his project, because he was sick of &amp;ldquo;supporting Fortune 500 companies with free work&amp;rdquo;.  &lt;/p&gt;
&lt;h3 id=&#34;open-source&#34;&gt;Open source&lt;/h3&gt;
&lt;p&gt;As far as I know, the genesis of open source software started with Eric Raymond (of Hacker&amp;rsquo;s Dictionary fame) and Linus Torvalds (of Linux and Git).&lt;/p&gt;
&lt;p&gt;The main advantages of open source are 1) the software can get more contributors than you could conceivably pay, so the open-source version of software improves faster than an equivalent paid product 2) full transparency into what the code is doing 3) it&amp;rsquo;s free and 4) because of 1, 2, and 3, it gets rapid adoption. And since software tends to interoperate with other software, open source code is likely to be on &lt;em&gt;both sides&lt;/em&gt; of the transaction.&lt;/p&gt;
&lt;p&gt;And yet, if you spend your time writing exclusively open-source code, you end up on beans &amp;amp; rice. How can something so valuable be worth so little, at least in the traditional renumerative sense?&lt;/p&gt;
&lt;h3 id=&#34;commoditizing-your-complements&#34;&gt;Commoditizing your complements&lt;/h3&gt;
&lt;p&gt;Poor ramen noodle eaters are not the only ones writing open-source code. Plenty of big companies do it too - in fact, the typical open-source project is sponsored in some way by a large tech company.&lt;/p&gt;
&lt;p&gt;Joel Spolsky, as always, &lt;a href=&#34;https://www.joelonsoftware.com/2002/06/12/strategy-letter-v/&#34;&gt;has a good reason &lt;/a&gt;for why companies might want to do this. Companies are trying to increase demand for their own products, and they know that if they can cheapen any complementary products or services, demand will go up. You can read some nice examples that Gwern has collected &lt;a href=&#34;https://www.gwern.net/Complement&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But big companies aren&amp;rsquo;t just commoditizing when they build. Facebook, for example, owns a &lt;a href=&#34;https://reactjs.org/community/team.html&#34;&gt;frontend Javascript framework&lt;/a&gt; that most modern tech companies use. Why bother? Facebook already has a great reputation among software engineers, but they&amp;rsquo;re pouring millions of dollars into maintaining a framework not just for themselves but for the entire software ecosystem. Do they really get value in their recruiting from all that investment?&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know if I have a good answer.&lt;/p&gt;
&lt;h3 id=&#34;information&#34;&gt;Information&lt;/h3&gt;
&lt;p&gt;Software is kind of a weird product. In some sense, all it is, is information. You have a screen in front of you that displays information, in the form of pixels with certain RGB values. And in the end, no matter how complex the code gets, all I&amp;rsquo;m sending is what pixels to display on your screen.&lt;/p&gt;
&lt;p&gt;Copying the pixels costs me nothing. Sending the pixels to you (thanks to the internet) costs me some trivial cost, less than a penny. And that means, generally speaking, that software has an initial cost but minimal, if any, ongoing cost to share. Well-written software doesn&amp;rsquo;t ever need to be written again, you just keep adding appendage after appendage until the.monster is large enough.&lt;/p&gt;
&lt;p&gt;I can sell the software, but programs are one of the few things that you typically sell based on the value it provides, rather than the medium it comes in. Tax software is about $100. &amp;ldquo;Big data&amp;rdquo; software could easily be 1000 times as much.&lt;/p&gt;
&lt;p&gt;Tax programs are priced the way they are because the competition (hiring an accountant for a short gig) costs slightly more. Software solves real-world problems, and competes on problem space, even if the solution is always in pixel form.&lt;/p&gt;
&lt;p&gt;But the &lt;em&gt;value&lt;/em&gt; of open source software isn&amp;rsquo;t zero. It&amp;rsquo;s just a discontinuity in the value / cost curve, and so people don&amp;rsquo;t know how to reason about it.&lt;/p&gt;
&lt;p&gt;I suspect the biggest reason for building open source is the most boring - open source developers get a sense of accomplishment. If someone uses your project, stars your github repo, thanks you for your service, etc. it feels good. Many programmers live online, and social approval indicators on their software output helps build reputation and credibility.&lt;/p&gt;
&lt;p&gt;In that sense, open source code doesn&amp;rsquo;t have to be paid - you pay the developer by honoring them when you use it.&lt;/p&gt;
&lt;p&gt;The next most common reason for building open source is that it&amp;rsquo;s used as a vector for forward sales. You provide some software for free, then hope that the service you sell on top (which requires the software) is the thing you can get paid for.&lt;/p&gt;
&lt;h3 id=&#34;implications-for-sudopoint&#34;&gt;Implications for Sudopoint&lt;/h3&gt;
&lt;p&gt;If you followed the first link in the post, you may have noticed that the open source developer who was complaining actually released a library *for creating fake data. *Basically, a programmer&amp;rsquo;s version of Sudopoint. &lt;strong&gt;Whoops.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If an open-source developer version of Sudopoint was so frustrating to maintain that the builder quit in a blaze of glory, does that have implications for my little entrepreneurial project?&lt;/p&gt;
&lt;p&gt;The honest answer is I&amp;rsquo;m not sure. I suspect that we have slightly different customer bases (his are developers, mine are people trying to demo / sell software). And different distribution mechanisms (his is github / NPM, mine is direct sales and to a lesser extent, this blog roll). We also know of &lt;a href=&#34;https://ssaraf.com/p/152ec1fa-68aa-4bef-b9ea-741781abd2cd/mockaroo.com&#34;&gt;several&lt;/a&gt;&lt;a href=&#34;https://ssaraf.com/p/152ec1fa-68aa-4bef-b9ea-741781abd2cd/tonic.ai&#34;&gt;competitors&lt;/a&gt; in a similar space - surely they aren&amp;rsquo;t all tightening their belts?&lt;/p&gt;
&lt;p&gt;But it remains to be seen how monetizable Sudopoint will be. And given the new gap in the open-source world, it might actually be worth the investment to start a few open-source initiatives ourselves. Stay tuned!&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Gaining Leverage</title>
      <link>https://ssaraf.com/gaining_leverage/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/gaining_leverage/</guid>
      <description>&lt;p&gt;Everyone knows that it&amp;rsquo;s easier to open a door the farther away you are from the hinge. The distance between the hinge and the handle is the &amp;ldquo;radius&amp;rdquo; which directly affects the &amp;ldquo;torque&amp;rdquo; you can apply. This principle is why longer wrenches are easier to turn, and longer arms throw baseballs faster. Colloquially we describe this as **leverage **- the same amount of force goes a lot farther because of the way in which the force is applied.&lt;/p&gt;
&lt;p&gt;Recently I&amp;rsquo;ve been obsessed with the idea of leverage in working life - are there situations where the same amount of effort causes outsized positive effects?&lt;/p&gt;
&lt;h3 id=&#34;meeting&#34;&gt;Meeting&lt;/h3&gt;
&lt;p&gt;I suspect the simplest form of leverage, at least at work, is a meeting. Rather than having pairwise conversations with each of 5 people, you can have one meeting with everyone in the room. That advantage increases substantially if the meeting is to make a decision, rather than simply convey one. Lots of folks will be contributing, and with everyone in the same room, at the same time, you can get a pretty big multiplier effect on the value of the time.&lt;/p&gt;
&lt;p&gt;Voice is the highest &lt;a href=&#34;https://www.sciencemag.org/news/2019/09/human-speech-may-have-universal-transmission-rate-39-bits-second&#34;&gt;bandwidth&lt;/a&gt; way to communicate. It isn&amp;rsquo;t unusual, at least at my day job, to see a meeting convert what would have been 10-15 hours of total conversation into a half an hour meeting.&lt;/p&gt;
&lt;p&gt;The problem with meetings is that everyone needs to clear out the same window of time in order to participate. In that sense, the &amp;ldquo;opportunity cost&amp;rdquo; of a meeting is cutting up everyone&amp;rsquo;s day to adjust for the slot. Is there something that&amp;rsquo;s higher leverage?&lt;/p&gt;
&lt;h3 id=&#34;writing&#34;&gt;Writing&lt;/h3&gt;
&lt;p&gt;Writing might be higher leverage than meetings, simply because you don&amp;rsquo;t have to force each person to clear out the same time slot, and you have an &amp;ldquo;asset&amp;rdquo; you can then send along later on to new people. I&amp;rsquo;ve observed that the managers who write the most not only drive the organization &lt;em&gt;more effectively&lt;/em&gt;, they have a steadily rising bank of assets that they can use with new team members. Writing is definitely slower than speaking, and a synchronous meeting can often resolve a difficulty that would be endlessly debated in slack / email, but a position piece or customer report written down is, in some sense, useful forever.&lt;/p&gt;
&lt;p&gt;This blog is my hope to take advantage of that leverage. Many of the topics I discuss here are ones that I&amp;rsquo;ve discussed pairwise with some of you, but by putting my thoughts down in one (shareable) place, I get the advantage of &amp;ldquo;killing two birds with one stone&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The main downside to writing is that the feedback is slower. I&amp;rsquo;ve found that conversations are high leverage for controversial, or difficult, topics because I&amp;rsquo;m not sure how it&amp;rsquo;ll end up when it starts. When the discussion is over videoconference or in-person, just the facial responses to what I&amp;rsquo;m talking about is enough for me to adjust. I have some visceral sense for what&amp;rsquo;s resonating, even if I&amp;rsquo;m not sure what to do about it.  &lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s almost impossible to get that degree of feedback when writing. In fact, there seems to be a bit of a gap - if the reader strongly agrees or strongly disagrees, I&amp;rsquo;ll probably hear about it, and will be able to adjust eventually (either as an edit or a follow on to the original note). But there&amp;rsquo;s a wide valley of stuff that I assume you either mildly agree with or mildly disagree with, and I never hear about it.&lt;/p&gt;
&lt;h3 id=&#34;hiring&#34;&gt;Hiring&lt;/h3&gt;
&lt;p&gt;Hiring is something I always seriously underestimated as a potential point of leverage. But it&amp;rsquo;s huge. Specifically, if the value to the business is X, and that value is scalable and can be hired for some cost Y, and X &amp;gt; Y, it &lt;strong&gt;always makes sense to hire, if you have the cash on hand&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Dan talks about this when describing the seeming &lt;a href=&#34;https://danluu.com/sounds-easy/&#34;&gt;inefficiency of big companies&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Businesses should keep adding engineers.. until the cost of adding an engineer equals the revenue gain plus the cost savings at the margin. This is often many more engineers than people realize.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most people don&amp;rsquo;t realize this because the fully loaded cost is baked into the person hired. That is, if I have a team of 10 people, the value I&amp;rsquo;m producing is 10(X-Y), and a team of 11 would be 11(X - Y)&amp;hellip;the team would be more productive in absolute terms, but not necessarily have leverage - its relative efficiency is the same.&lt;/p&gt;
&lt;p&gt;Instead you should see the cost of hiring as an investment, usually spent on marketing, sourcing, recruiting, pitching to candidates, interviewing, and so on. Therefore the real measurement of value if you decide to hire is something like: (10+n)(X-Y) - Zn. where n is the number of people you recruit, Z is the cost of hiring, and X-Y &amp;raquo; Z.&lt;/p&gt;
&lt;p&gt;Thus the real decision is on whether to keep the team static, or invest in it. And since that decision turns a constant value producer into a positive linear one (at least in our simple model), it almost always makes sense to spend on hiring if you can afford to do so.&lt;/p&gt;
&lt;p&gt;For programmers in the audience, you could also see this analysis as a form of &lt;a href=&#34;https://en.wikipedia.org/wiki/Big_O_notation&#34;&gt;Big O notation&lt;/a&gt; - we can measure our leverage as a function of how much investment we put in. If we get constant value, like in a single conversation with one other person, it&amp;rsquo;s O(1) (pronounced &amp;ldquo;oh of one&amp;rdquo;). In this case we get linear value - O(n).&lt;/p&gt;
&lt;h3 id=&#34;coding&#34;&gt;Coding&lt;/h3&gt;
&lt;p&gt;The above mechanisms for leverage ultimately boil down to getting another person to help with a project - either in convincing them to take an action or make a decision, or in doing the substance of the work. Coding is different, in that you can get computers to do some jobs. It&amp;rsquo;s harder to teach a computer how to do something than a human, but once it&amp;rsquo;s taught, it&amp;rsquo;ll remember how to forever, and there&amp;rsquo;s usually an easy way to &amp;ldquo;clone that knowledge&amp;rdquo; to other computers.&lt;/p&gt;
&lt;p&gt;The current zeitgeist is full of missives about &amp;ldquo;automation&amp;rdquo; and &amp;ldquo;algorithms taking over&amp;rdquo;, but I think the real advantage here is for people. If you can teach a computer how to do something, you&amp;rsquo;ll be able to be 100x more productive than someone who can&amp;rsquo;t. So it&amp;rsquo;s just a matter of learning the &amp;ldquo;language&amp;rdquo; that the computer speaks. Once you can, you&amp;rsquo;ll be able to duplicate your work extremely effectively.&lt;/p&gt;
&lt;h3 id=&#34;meta-leverage&#34;&gt;Meta-leverage&lt;/h3&gt;
&lt;p&gt;I think this brings me to the &lt;em&gt;meta&lt;/em&gt; aspect of gaining leverage. Leverage is something that tends to multiply together. We saw above how hiring is a source of leverage. But what if you hire people &lt;em&gt;who write well&lt;/em&gt;? Now the leverage that comes from hiring is multiplied by the effectiveness of the people you&amp;rsquo;ve hired.&lt;/p&gt;
&lt;p&gt;This meta-leverage, where the multiplier gets multiplied, can get us O(n^2) or higher power in the investment we make.&lt;/p&gt;
&lt;p&gt;For example, time spent learning critical skills can be a powerful source of meta-leverage. Learning to code, learning to write, or learning specific skills for your work are all investments you can make that should pay off more and more over the long term.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve talked about &lt;a href=&#34;https://ssaraf.com/human-knowledge.html&#34;&gt;this&lt;/a&gt; before, but human knowledge in any particular field is shallow enough for you (yes, you) to get to, say, top 5% in the world, within a few years.&lt;/p&gt;
&lt;p&gt;Can we go up another level? Yes I think we can. Evidence suggests that for every hour you exercise, you gain an &lt;a href=&#34;https://www.wbur.org/commonhealth/2013/03/15/minutes-exercise-longer-life&#34;&gt;additional 8 hours to live&lt;/a&gt;. And since all of the items above require time, the more time you can give yourself, the more leverage you&amp;rsquo;ll have overall.&lt;/p&gt;
&lt;p&gt;I think we&amp;rsquo;ve run out of oxygen now. We&amp;rsquo;ve now gotten to platitudes - exercise frequently, study hard, blah blah blah. But I think the lesson from this piece is that there are very few things I do, day to day, that provide the highest form of leverage for that type of activity. Watching TV? 0 leverage. Sending a slack message? Probably constant leverage, at best. Going for a run? Very high leverage.&lt;/p&gt;
&lt;p&gt;It means that in the micro-decisions I&amp;rsquo;m making day-to-day, I can switch out low leverage activities for high leverage ones. Lots of one-on-one meetings become group huddles. Emails to one person become shared memos for everyone. Cooking today&amp;rsquo;s lunch becomes meal-prepping for a week. Reading a book instead of browsing Hacker News. Working late on hiring instead of working late as an individual contributor. Etc. Decisions about leverage are made every day, and at least for me, it takes a concrete effort to choose the higher leverage option (usually because there&amp;rsquo;s a higher activation energy).&lt;/p&gt;
&lt;p&gt;I wonder if, in reading this piece, other people would start to behave similarly. In that case, the highest leverage thing I could possibly do is put this in your inbox.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>You should probably be writing more</title>
      <link>https://ssaraf.com/write_more/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/write_more/</guid>
      <description>&lt;p&gt;One of the biggest pieces of feedback I get from this blog is on the frequency and consistency of the posts: roughly 2000 words, every Monday morning. So I thought I&amp;rsquo;d spend this week&amp;rsquo;s post talking about my general process of writing.&lt;/p&gt;
&lt;h3 id=&#34;my-history&#34;&gt;My history&lt;/h3&gt;
&lt;p&gt;This is not my first attempt at writing for an audience. You can still see posts from my old &lt;a href=&#34;https://ssaraf.com/p/5e72b787-3d78-449a-95e0-1358ba16cd44/ssaraf.com&#34;&gt;blog&lt;/a&gt;, I wrote occasionally for &lt;a href=&#34;https://medium.com/stanfordreview/a-10-000-stanford-degree-eef1a0ae480f&#34;&gt;school newspapers&lt;/a&gt;, and I write a LONG &amp;ldquo;Happy New Year&amp;rdquo; email to friends &amp;amp; family every year. I always loved writing, but I did it fairly rarely. And even now, I&amp;rsquo;m not exactly productive - most professional authors can get &lt;a href=&#34;https://www.goodreads.com/quotes/49619-i-like-to-get-ten-pages-a-day-which-amounts&#34;&gt;2000 words a day&lt;/a&gt; (7x my pace).&lt;/p&gt;
&lt;p&gt;My writing quality also leaves a lot to be desired. I tend to speak with a lot of conditional phrases and parenthetical statements, so I tend to write the same way. And I don&amp;rsquo;t think I&amp;rsquo;ve written anything that has been completely grammatically correct - I *always *find errors after I publish.&lt;/p&gt;
&lt;p&gt;That said, I&amp;rsquo;m probably more productive than you are. So here&amp;rsquo;s what I&amp;rsquo;ve found useful.&lt;/p&gt;
&lt;h3 id=&#34;you-are-qualified-enough&#34;&gt;You are qualified enough&lt;/h3&gt;
&lt;p&gt;Imposter syndrome is a huge problem for aspiring writers. I feel it too. Someday one of you will respond to a post with &amp;ldquo;you&amp;rsquo;re totally unqualified to talk about this&amp;rdquo; and my fear will be realized. I&amp;rsquo;ll probably stress eat an entire pizza and cry myself to sleep.&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s another flavor of imposter syndrome which appears to be more common. That fear is: I need to reach &lt;!-- raw HTML omitted --&gt;, then I&amp;rsquo;ll be &amp;ldquo;qualified&amp;rdquo; to talk about this. Before that, I would just be a total arrogant jerk if I were to pretend I knew what I was talking about.&lt;/p&gt;
&lt;p&gt;The next milestone could be graduating from university, or getting enough experience in your field of interest, or attaining a high enough leadership position etc. In my opinion this fear is kibosh.&lt;/p&gt;
&lt;p&gt;For example, if you&amp;rsquo;re in high school, not only are you qualified to talk about it - your writing will be far more compelling if you write about it now, then after you&amp;rsquo;ve reached some age or title which you think &amp;ldquo;gives you permission&amp;rdquo; to do so. I&amp;rsquo;m too old to write about high school, or college / graduate school&amp;hellip;those experiences were long enough ago that effectively any specific anecdotes have turned into a fog of lost memories.&lt;/p&gt;
&lt;p&gt;I wonder if autobiographies would be more interesting if they were written while a person was living their life (say, 1 chapter per 5 year period), rather than at the end of it, when they felt there were most qualified to sum it all up.&lt;/p&gt;
&lt;p&gt;You have expertise that few other people have. The problem is, in your chosen field, if you look upwards you see people more qualified than you. &lt;em&gt;They&amp;rsquo;re&lt;/em&gt; the ones who really should be writing, right? And since practically everyone can look up to someone else, imposter syndrome is this &lt;em&gt;universal&lt;/em&gt; feeling. It&amp;rsquo;s turtles all the way down.&lt;/p&gt;
&lt;p&gt;So let me make it clear: yes, you probably don&amp;rsquo;t have the perfect qualifications. No, I don&amp;rsquo;t care. The question isn&amp;rsquo;t about your qualifications, it&amp;rsquo;s about whether someone has written the story that you would write. And they haven&amp;rsquo;t. There is a massive shortage of compelling, high quality writing.&lt;/p&gt;
&lt;p&gt;And this is more than just a &amp;ldquo;you&amp;rsquo;re special too, you little snowflake&amp;rdquo; sermon. Given a specific domain, there are almost always needs that haven&amp;rsquo;t been met by the existing literature. Do you really think no one had written about cancer before &lt;a href=&#34;https://www.amazon.com/dp/B004MPR80E/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&#34;&gt;Siddharth Mukherjee&lt;/a&gt; did?&lt;/p&gt;
&lt;h3 id=&#34;quantity--quality&#34;&gt;Quantity &amp;gt; Quality&lt;/h3&gt;
&lt;p&gt;When you sit down to start, you&amp;rsquo;ll find that what you write doesn&amp;rsquo;t quite meet your standards. It might seem dull, or the writing isn&amp;rsquo;t quite as captivating, or you&amp;rsquo;re talking about something you think no one cares about, etc.&lt;/p&gt;
&lt;p&gt;The good news is the solution is to churn out as much stuff as you can. Get it all down on paper. Follow &lt;a href=&#34;https://www.youtube.com/watch?v=X2wLP0izeJE&#34;&gt;Ira Glass&#39; advice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I suspect people procrastinate on writing partly because they think good writing is some type of &lt;a href=&#34;https://dragonball.fandom.com/wiki/Kamehameha&#34;&gt;Dragonball Z energy blast&lt;/a&gt; that you save up and then explode with at the right time. Maybe, but I doubt it. Everything I&amp;rsquo;ve read about writing suggests that it&amp;rsquo;s much more pedestrian, like regular exercise. Here&amp;rsquo;s Neal Stephenson on his &lt;a href=&#34;https://blog.ed.ted.com/2015/06/04/neal-stephensons-writing-advice-for-students-and-everyone-else/&#34;&gt;approach&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes people are led to believe that writing is a kind of fine art, where some mysterious inspiration strikes and magic happens. I think it’s more like cabinet making or soccer playing, where if you do it a whole lot you get good at it, and if you stop doing it you either stop getting good at it or you actually lose ability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jeff Atwood &amp;amp; Rachel Kroll seem to have &lt;a href=&#34;https://blog.codinghorror.com/how-to-achieve-ultimate-blog-success-in-one-easy-step/&#34;&gt;similar&lt;/a&gt;&lt;a href=&#34;https://rachelbythebay.com/w/2018/03/13/write/&#34;&gt;advice&lt;/a&gt;. They got started, and built up very successful reputations, by writing frequently (far more than I do) and slowly gaining an audience over years.&lt;/p&gt;
&lt;h3 id=&#34;discovery&#34;&gt;Discovery&lt;/h3&gt;
&lt;p&gt;Everyone seems to have ideas in the shower, but I think we misunderstand why. Our brains are input / output machines, and for most of our lives, there is a constant stream of input. We&amp;rsquo;re watching TV, reading the internet, interacting with friends, etc. We also generate output constantly - even if you aren&amp;rsquo;t speaking, there&amp;rsquo;s always something on your mind.&lt;/p&gt;
&lt;p&gt;The only reason a shower is unique is: 1) you&amp;rsquo;re usually always alone 2) the water noise is so loud that you can&amp;rsquo;t hear anything else 3) the steam prevents you from looking at anything (your phone, for example). How many times can you read the back of the shampoo bottle, anyway?&lt;/p&gt;
&lt;p&gt;So the shower is the one time, in daily life, where you effectively have no inputs. (I&amp;rsquo;m excluding sleep, as you aren&amp;rsquo;t conscious. But sleep&amp;rsquo;s effect on creativity has been &lt;a href=&#34;https://www.theatlantic.com/science/archive/2018/05/sleep-creativity-theory/560399/&#34;&gt;well documented&lt;/a&gt; too.)&lt;/p&gt;
&lt;p&gt;Even if you have no inputs, your brain still needs to create output - you are always thinking about &lt;em&gt;something&lt;/em&gt;, aren&amp;rsquo;t you? And so your brain ruminates on past ideas, and generates new ones. That&amp;rsquo;s why you get your a-ha moment while your hair is wet.&lt;/p&gt;
&lt;p&gt;For those of you who do a lot of boring, repetitive tasks you&amp;rsquo;ll notice that you&amp;rsquo;ll have similar moments while you are mowing the lawn, washing dishes, or vacuuming (circumstances where your visual and audio inputs are similarly minimized). There is no magic in hot water.&lt;/p&gt;
&lt;p&gt;I find the same happens to me when writing. I sit down to a blank page, and have a rough idea of what I want to write about, but somehow the words take me on a path that I didn&amp;rsquo;t really expect to go on. Writing isn&amp;rsquo;t a mechanism to &amp;ldquo;save ideas&amp;rdquo;, it&amp;rsquo;s a mechanism to create them. Similar to showering, when writing I&amp;rsquo;m only looking at the page, and not listening to anyone else. The only difference is, the ideas get put in a place that everyone can see them, rather than bouncing around my head forever.&lt;/p&gt;
&lt;h3 id=&#34;kill-your-ego&#34;&gt;Kill your ego&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s another problem that I had when I started writing. Basically, I wanted to &lt;em&gt;sound impressive&lt;/em&gt;. I wrote in a way that portrayed me as a real intellectual - one of those smarmy bastards whose work was good for your bookshelf (even if it never &lt;em&gt;left&lt;/em&gt; the bookshelf).&lt;/p&gt;
&lt;p&gt;The main problem with writing that way is it&amp;rsquo;s boring. Really boring. When I attempted to write &amp;ldquo;like an intellectual&amp;rdquo; I couldn&amp;rsquo;t even reread my own writing without taking breaks. If you&amp;rsquo;re bored by your own writing, how do you expect the friendly (and unfriendly) reader to wade their way through it?&lt;/p&gt;
&lt;p&gt;The best way I&amp;rsquo;ve found to solve this problem is to write as if I&amp;rsquo;m speaking to a friend. I make jokes. I curse. I&amp;rsquo;m not writing for some poor English teacher 100 years from now who has to analyze every word to see if I have a deep relationship with the color green.&lt;/p&gt;
&lt;p&gt;If you read this with your morning coffee and enjoy it, that&amp;rsquo;s enough. You don&amp;rsquo;t have to worship me. And I hope to God that if I publish like an arrogant twit you&amp;rsquo;d puncture my ego before I got too far.&lt;/p&gt;
&lt;h3 id=&#34;write-for-an-audience&#34;&gt;Write for an audience&lt;/h3&gt;
&lt;p&gt;Some people are satisfied with writing in a journal that only they will ever read. My problem is that it&amp;rsquo;s hard to motivate myself to do that. Having an audience is fun!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not prominent enough to have trolls or spammers, so many of the responses I get are quite interesting. A significant number show a depth of intellectual thought that I hadn&amp;rsquo;t plunged to on the topic of interest.&lt;/p&gt;
&lt;p&gt;There is one big downside to having an audience&amp;hellip;there are some things I simply can&amp;rsquo;t talk about with this group. That probably includes politics, religion, and current events (I would like for these articles to be useful years from now). I don&amp;rsquo;t talk about my day job outside of Sudopoint. I don&amp;rsquo;t stray too far into technical nuances because a large portion of my audience doesn&amp;rsquo;t write code.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a lot of limitations! I think about all of those things for much of my week, and I tend to write about what I&amp;rsquo;m thinking. If there was a mechanism to achieve the depth of thought I get in these posts, but on those topics, I probably would take advantage of it. But there isn&amp;rsquo;t, perhaps until the next social network comes around.&lt;/p&gt;
&lt;p&gt;Even with those limitations, and excluding reader feedback, writing here is worth the trouble. I&amp;rsquo;m beginning to build up a bank of ideas that I can then reference in other conversations. Effectively, writing is a way of scaling your ideas - not implementing them, but spreading the ideas themselves. As much as one cringes at reading &lt;a href=&#34;https://nav.al/&#34;&gt;Naval&lt;/a&gt; or &lt;a href=&#34;https://stratechery.com/&#34;&gt;Ben Thompson&lt;/a&gt; or &lt;a href=&#34;https://tim.blog/&#34;&gt;Tim Ferriss&lt;/a&gt;, the reality is that when those people say things, people listen. Already I&amp;rsquo;m starting to see the occasional reader push an idea that was mentioned here. &amp;ldquo;You&amp;rsquo;re in people&amp;rsquo;s &lt;em&gt;minds&lt;/em&gt;, dude!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The number of people who read your stuff is usually way larger than you might think - even with a very small blog following (say, a couple dozen people), you can spread ideas far faster than you could in direct conversation. I&amp;rsquo;m already starting to see these notes with &amp;ldquo;Fwd: Fwd: Fwd:&amp;rdquo; replies. And I only started a couple months ago.&lt;/p&gt;
&lt;h3 id=&#34;send-me-your-stuff&#34;&gt;Send me your stuff!&lt;/h3&gt;
&lt;p&gt;So this is an open invitation - if you&amp;rsquo;re writing something and want to feel the warm glow of a reader actually enjoying it, email it to me. I have plenty of time, and want to encourage folks to start writing more. Especially since my audience, at this moment, is mostly comprised of friends and allies who are super smart, but don&amp;rsquo;t really share their ideas in a scalable way.&lt;/p&gt;
&lt;p&gt;I want to hear what you have to say.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>On Links</title>
      <link>https://ssaraf.com/on_links/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/on_links/</guid>
      <description>&lt;p&gt;Traditionally, the way to get to a webpage to via a search engine, a social network, or an aggregator like reddit. But there isn&amp;rsquo;t really a reason why these should be the only ways, and I think the web is suffering because of it.&lt;/p&gt;
&lt;p&gt;The original idea of the internet is that ordinary people could build a webpage like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;My first website&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    Hello world! Here&#39;s a link to a cool thing:
    &amp;lt;a href=&amp;quot;http://www.anexamplewebsite.com&amp;quot;&amp;gt;My example website&amp;lt;/a&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;d use some type of hosting to &amp;ldquo;deploy your page to the web&amp;rdquo;. Then users could visit your website using a browser and roll their eyes at how boring it was. Then they&amp;rsquo;d click a link to another website. You&amp;rsquo;ll notice that the markup above includes a &amp;ldquo;link&amp;rdquo;. The browser would color the link &lt;a href=&#34;#example&#34;&gt;blue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Slowly things got added from there. Someone probably wanted to make the links red instead of blue, so God&lt;a href=&#34;https://www.w3.org/Style/CSS20/history.html&#34;&gt;they&lt;/a&gt; invented CSS. Then Javascript was added for basic user interactivity. Nowadays websites can be really complicated, but at least at a surface level, they&amp;rsquo;re just markup documents as before - just HTML, CSS, and JS.&lt;/p&gt;
&lt;p&gt;So far so good - right? Okay, now the problem is, all these chuckleheads are putting up websites, and there&amp;rsquo;s no good way to find a specific one, except by clicking links from the ones you already know about. The decentralized nature of the web makes it easy to create pages, but hard to navigate across them.&lt;/p&gt;
&lt;p&gt;Given that need, people started to make little bots that would, effectively, start with a webpage, visit every link in the markup, open those as webpages, visit every link in their markup, and so on.&lt;/p&gt;
&lt;p&gt;To a first approximation, Google&amp;rsquo;s index today is built the same way. They have a bunch of complex techniques for actually doing the visiting, link traversing, etc. but the underlying approach isn&amp;rsquo;t that different. Google&amp;rsquo;s primary innovation was that, for a user searching across the index, they ordered their search results by &lt;a href=&#34;https://en.wikipedia.org/wiki/PageRank&#34;&gt;what was most linked to&lt;/a&gt;. The idea was to &amp;ldquo;crowdsource&amp;rdquo; which websites had value. The democracy of the internet would decide which links where worth adding and which were not. And Google would simply count up the votes, and then order the search results accordingly.  &lt;/p&gt;
&lt;p&gt;Since people would visit Google for their great search results, &lt;em&gt;and&lt;/em&gt; their visits would drive linking behavior, it caused a positive feedback loop. Now almost everyone will search via Google, and therefore if you aren&amp;rsquo;t on Google, you might as well &lt;em&gt;not exist&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This blog is an example of something that doesn&amp;rsquo;t really exist on Google (as of this writing). You can find it if you search for &amp;ldquo;sudopoint&amp;rdquo;, or a very specific phrase from one of the posts, but by definition, if you knew either of those things you probably wouldn&amp;rsquo;t have needed a search engine (you would have had the link some other way - either I spammed it to you via email, or you know me in real life, etc). The whole goal of a search engine is to surface links that you wouldn&amp;rsquo;t be able to find, and while that works well for &amp;ldquo;established websites you haven&amp;rsquo;t heard of yet&amp;rdquo; it doesn&amp;rsquo;t work nearly as well for &amp;ldquo;recently created websites&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The problem then becomes, if you&amp;rsquo;re a new website, how do you get Google&amp;rsquo;s attention? And it turns out the answer is to write a bunch of drivel that other people will link to, &lt;em&gt;after finding it on Google&lt;/em&gt;. Wait, what?&lt;/p&gt;
&lt;p&gt;Yeah, that&amp;rsquo;s the downside to a positive feedback loop that &lt;em&gt;everyone uses&lt;/em&gt;. The only way to enter the loop is to jump in and hope that the search-&amp;gt;link-&amp;gt;search-&amp;gt;link lifecycle will bring you from the bottom of the results closer to the top. The idea behind adding the drivel is that unique phrases you happen to use will catch some small percentage of searchers, who then link to you, so you go up the rankings and more searchers find you.&lt;/p&gt;
&lt;p&gt;Google&amp;rsquo;s hope of a democracy where people choose the most valuable webpages has turned into a rat race where people structure their webpages specifically to cater to Google&amp;rsquo;s algorithms. Want to make a useful tool? You should probably add a lot of text, not for users visiting the page, but so that you catch a tiny ray of Googly sunlight. That&amp;rsquo;s the real reason why recipe websites tend to have a &lt;a href=&#34;https://mashable.com/article/why-are-there-long-stories-on-food-blogs/&#34;&gt;whole bunch of crap before actually showing the recipe&lt;/a&gt;. The measure has become the &lt;a href=&#34;https://en.wikipedia.org/wiki/Goodhart%27s_law&#34;&gt;target&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That also means that search results are getting worse. Google itself is driving traffic to the crap, and then measuring that traffic as an indicator of value. Meanwhile, us proletariat are starving to find &lt;a href=&#34;https://www.gwern.net/Morning-writing&#34;&gt;decent&lt;/a&gt;, &lt;a href=&#34;https://acoup.blog/2020/09/18/collections-iron-how-did-they-make-it-part-i-mining/&#34;&gt;in-depth material&lt;/a&gt; that was pretty normal to find back in the 90s. Don&amp;rsquo;t even get me started on the vacuous, pseudo-intellectual tidbits that people tweet five times a day. Get off my lawn, modern internet.&lt;/p&gt;
&lt;p&gt;Is this an unhinged rant? Yes. But I do have a couple of ideas for ways this could be improved.&lt;/p&gt;
&lt;h3 id=&#34;the-basic-directory&#34;&gt;The basic directory&lt;/h3&gt;
&lt;p&gt;The idea behind Yahoo&amp;rsquo;s directory (the first one that I can remember) is that most people wanted to visit the same, say, 500 websites. And we can organize those websites into categories - sports over here, culture over there, etc. So you can just make a massive page of links and let people use that to find stuff. In fact, Yahoo&amp;rsquo;s first search box was less of a search of the internet and more of a &lt;em&gt;search of the directory&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s obvious that this approach probably wouldn&amp;rsquo;t work well today. The internet is &lt;em&gt;much&lt;/em&gt; bigger now than it was when David &amp;amp; Jerry were building Yahoo, and you can&amp;rsquo;t browse through it all, or even categorize it, in one place. However, the number of distinct pages that people actually visit is pretty limited - could we do better?&lt;/p&gt;
&lt;h3 id=&#34;the-social-directory&#34;&gt;The social directory&lt;/h3&gt;
&lt;p&gt;Instead of a generic directory of everything on the internet, maybe we add things to the directory based on what people visit. So, for example, we have a page that lets people submit links, and we rank everything in the directory based on which links get visited most. Depending on how you think of it, facebook / twitter / linkedin are the &amp;ldquo;social network&amp;rdquo; version of this directory (where &amp;ldquo;links visited&amp;rdquo; is replaced by &amp;ldquo;likes / shares / retweets&amp;rdquo;) and hacker news / reddit are &amp;ldquo;link aggregator&amp;rdquo; versions of this directory (where &amp;ldquo;links visited&amp;rdquo; is replaced by &amp;ldquo;votes&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;The problem with this approach is, frankly, your results aren&amp;rsquo;t going to be that different. The same people clicking on boring garbage in search engines are probably going to like / vote on boring garbage in the social directory. You can always niche your directory to a specific cohort of users (pinterest is targeted to women, hacker news is targeted to programmers, and so on), but ultimately your directory is still going to be biased to the shallow and easily accessible.&lt;/p&gt;
&lt;h3 id=&#34;the-tiered-social-directory-tsd&#34;&gt;The tiered social directory (TSD)&lt;/h3&gt;
&lt;p&gt;Okay so maybe instead of treating all of your friends as equal, you take a harsher approach. Some of your friends are smart / intellectual / interesting, and the rest of them aren&amp;rsquo;t. You&amp;rsquo;re going to force people to categorize which folks are &amp;ldquo;trusted&amp;rdquo; and which aren&amp;rsquo;t, and you create a link directory solely based on what the trusted people like.&lt;/p&gt;
&lt;p&gt;This doesn&amp;rsquo;t really exist today, but you could imagine building a &amp;ldquo;book club&amp;rdquo; like experience for reddit where only people &amp;ldquo;with status&amp;rdquo; get to submit articles. Or a browser plugin that scrapes everyones history and the collates it somewhere, and you choose which people&amp;rsquo;s links to follow, etc.&lt;/p&gt;
&lt;p&gt;The problem is that smart people are still kind of dumb sometimes. Smart people will read memes (I still do). Smart people will talk about silly topics. Even if I picked my 20 cleverest friends, I&amp;rsquo;m not sure how good of a link directory we&amp;rsquo;d build together. We still need some way of removing the garbage.&lt;/p&gt;
&lt;p&gt;However, this approach does solve one problem that Google currently doesn&amp;rsquo;t. Smart folks can easily distinguish between SEO crap and actually substantive, interesting writing. So here&amp;rsquo;s where we&amp;rsquo;re at now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shallow and interesting&lt;/strong&gt; - supported by Google / social / aggregators &amp;amp; TSD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shallow and uninteresting&lt;/strong&gt; - supported by Google / social / aggregators, vetoed by TSD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deep and interesting&lt;/strong&gt; - supported by TSD, vetoed by Google / social / aggregators&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deep and uninteresting&lt;/strong&gt; - supported by no one. Also, arguably, this isn&amp;rsquo;t a thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Distinguishing between shallow and deep is &lt;em&gt;socially&lt;/em&gt; difficult but it might not be *algorithmically *difficult.&lt;/p&gt;
&lt;h3 id=&#34;tiered-social-directory--algorithmic-sorting&#34;&gt;Tiered social directory + algorithmic sorting&lt;/h3&gt;
&lt;p&gt;One could picture basic heuristics to sort deep pages from shallow ones. Deep pages will have a lot of text, shallow ones will have a lot of images. Deep pages will not be about certain topics (celebrity gossip, for example). Deep pages will generally link to other deep pages. And so on.&lt;/p&gt;
&lt;p&gt;When I think about the webpages that I most often visit, I&amp;rsquo;m basically building this directory in my head each time: 1) did the person who sent me this link fall into the &amp;ldquo;trusted&amp;rdquo; or &amp;ldquo;untrusted&amp;rdquo; category and 2) does the page itself look like most of the other trusted pages look?&lt;/p&gt;
&lt;p&gt;There are some positive signs that the current link aggregators know something is wrong and are trying to adjust. Facebook is currently attempting to make the newsfeed more &amp;ldquo;meaningful&amp;rdquo;, and Google is attempting to make their links more user relevant, though I agree with Paul Graham that it &lt;a href=&#34;http://www.paulgraham.com/ambitious.html?viewfullsite=1&#34;&gt;hasn&amp;rsquo;t gone that well&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I really think this might be a place for a viable competitor. Let me know if you find something that is moving in this direction - I&amp;rsquo;d love to try it!&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>How to make time</title>
      <link>https://ssaraf.com/how_to_make_time/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/how_to_make_time/</guid>
      <description>&lt;p&gt;Sudopoint is &amp;ldquo;feature complete&amp;rdquo; now - it includes a marketing website, landing page, this blog, the application, the database that backs it, an email system, payments integration, support for user-defined custom functions, support for downloading arbitrarily large datasets, a beta API layer, etc.&lt;/p&gt;
&lt;p&gt;Okay maybe I&amp;rsquo;m bragging. I&amp;rsquo;m proud, alright? It took me a long time to build, and there aren&amp;rsquo;t that many folks who&amp;rsquo;ve managed to build something end-to-end &lt;em&gt;while&lt;/em&gt; having a full time job.&lt;/p&gt;
&lt;p&gt;Even though I&amp;rsquo;ve already talked through some tactics for &lt;a href=&#34;https://ssaraf.com/how-to-build-a-software-company-on-5-hours-a-week/&#34;&gt;building something while working&lt;/a&gt;, I thought I&amp;rsquo;d spend some time on my own personal productivity tips for getting things done.&lt;/p&gt;
&lt;h3 id=&#34;maker-schedule--manager-schedule&#34;&gt;Maker schedule / Manager schedule&lt;/h3&gt;
&lt;p&gt;I buy into &lt;a href=&#34;http://www.paulgraham.com/makersschedule.html&#34;&gt;Paul Graham&amp;rsquo;s description&lt;/a&gt; of makers vs managers. When you&amp;rsquo;re a maker, you&amp;rsquo;d like a lot of time in a single block, where you know you aren&amp;rsquo;t going to be interrupted, so you can build whatever you need to build. When you&amp;rsquo;re a manager, you have appointments, which you slot into a schedule. Interruptions aren&amp;rsquo;t just a part of your job, they&amp;rsquo;re &lt;em&gt;your whole job&lt;/em&gt;. Paul apparently managed his startup by working two shifts per day, one as a maker, another as a manager. Later on, at YC, he apparently stuck to the maker schedule for 4 days and went on the manager schedule for 1 (in the form of office hours).&lt;/p&gt;
&lt;p&gt;What Paul doesn&amp;rsquo;t describe is how to negotiate the two types of schedule into your daily life as a regular shmoe. Few of us are fresh college grads without commitments, even though we wish we were!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my typical schedule, as a lowly PM in my day job and a CEO at night:&lt;/p&gt;
&lt;p&gt;7 AM - wake up, eat breakfast, shower.
9 AM - work day starts
12 PM - lunch
6 PM - work day ends
7 PM - dinner
11 PM - bedtime&lt;/p&gt;
&lt;p&gt;I have a pretty normal social life for a non-single person in their late 20s / early 30s without kids: most weekend nights are busy in one way or another, usually in social obligations. Most weekday evenings are spent with my partner. I eat and sleep the normal amount.&lt;/p&gt;
&lt;p&gt;My average weekday has about 6 hours of meetings, much of it not scheduled or owned by me. Since I keep a very strict schedule (I will not respond to work emails over the weekend) that means I *have to use *the remaining time during the day on day job work: writing emails, prepping documents, and so on.&lt;/p&gt;
&lt;p&gt;Ultimately that means I only have two slots to work on Sudopoint: between 7 AM and 9 AM on weekdays, and a couple hours on Sunday nights. Unfortunately, as Paul says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t write or program well in units of an hour. That&amp;rsquo;s barely enough time to get started.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, unless I&amp;rsquo;m hyper-efficient in using that time, I&amp;rsquo;m not going to be productive. Let&amp;rsquo;s get to work.&lt;/p&gt;
&lt;h3 id=&#34;first-make-a-list&#34;&gt;First, make a list.&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve always had a terrible memory, and not much interest in improving it. Why bother? Everything I need to do gets put into a digital document which can remember things far better than I can! So list-making has been big for me for a while. That said, I think its usage is as &lt;a href=&#34;https://www.amazon.com/dp/B086XF436Z&#34;&gt;underrated for makers as it is for surgeons&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Specifically, every week, I make a list of exactly what I want to do for Sudopoint. Since &lt;a href=&#34;https://www.digitalocean.com/products/droplets/&#34;&gt;capital requirements in technology are so low as to be insulting&lt;/a&gt; the main expense for me is the time I have to dedicate.&lt;/p&gt;
&lt;p&gt;I can spend at most 10 hours per week, which means that while I have plenty of cash I am *very time poor. *Describing yourself as &amp;ldquo;in poverty&amp;rdquo; makes it much clearer what you must do and how you must organize yourself. What&amp;rsquo;s a bit surprising to me is how poor so many financially rich and successful people are. Don&amp;rsquo;t they know how much they&amp;rsquo;re losing in the flurry of back to back meetings?&lt;/p&gt;
&lt;p&gt;If you were cash poor, you would make a budget, figure out what you needed to spend money on, in order by both necessity and price, and work your way down the list. Same goes when you&amp;rsquo;re time poor. (You&amp;rsquo;d probably also try to increase your budget by getting more time, but the best I can do so far is &lt;a href=&#34;https://ssaraf.com/the-keynesian-workweek/&#34;&gt;yell into the void that 40 hour work weeks should be adjustable&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say our list looks something like:&lt;/p&gt;
&lt;p&gt;High Priority: Optimize the application, 5 hours
High Priority: Talk to potential users, 1 hour to schedule, 2 to participate, 2 for notes
Medium Priority: Add testimonial to landing page, 1/2 hour
Low Priority: Clean up code with old payment integration, 3 hours&lt;/p&gt;
&lt;p&gt;Frankly, this list is terrible. Some quick tactical advice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You aren&amp;rsquo;t making a wish-list, you&amp;rsquo;re making a list for what to do over the course of the week. Remember &lt;a href=&#34;https://en.wikipedia.org/wiki/Hofstadter%27s_law&#34;&gt;Hofstadter&amp;rsquo;s law&lt;/a&gt;. The items on the list will inevitably take longer than you think, and that&amp;rsquo;s okay. Budget for 7 hours, not 12.&lt;/li&gt;
&lt;li&gt;Lists are not for all items regardless of priority. Remove the medium and low items and stop dreaming. If it was important to work on, those things would be high priority, wouldn&amp;rsquo;t they?&lt;/li&gt;
&lt;li&gt;Break tasks into units that are smaller than the windows you have to work on them. In my case, no task is allowed to be bigger than 2 hours long, and ideally they are sized at half an hour, so I can do more than one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, now my list looks something like this:&lt;/p&gt;
&lt;p&gt;High Pri: Add basic profiling to diagnose speed issues, 10 min
High Pri: Optimize the landing page, 30 min
High Pri: Optimize static assets in the app, 1 hour
High Pri: Optimize database reads / writes, 30 min&lt;/p&gt;
&lt;p&gt;High Pri: Send out emails to 5 people, 15 min
High Pri: Schedule meetings with 5 people for &amp;gt; 1 week out, 15 min&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s much better! We still don&amp;rsquo;t know exactly which thing to work on, but we have two options, both which seem fairly tractable and straightforward, which lead to subsequent tasks in each subtree.&lt;/p&gt;
&lt;p&gt;Make your choice on which to work on based on what feels easiest. Yeah, really. I&amp;rsquo;m still an ape, not some kind of automaton. Some kinds of work I feel like doing, other types I don&amp;rsquo;t feel like doing, and I find that the spin-up time for a disagreeable task can be so large that it destroys my morning work session entirely.&lt;/p&gt;
&lt;p&gt;Interestingly, I&amp;rsquo;ve seen analogs for this in other places too. Dave Ramsey, a financial advice author, recommends that folks in debt settle their debts in the order of &lt;a href=&#34;https://www.daveramsey.com/blog/get-out-of-debt-with-the-debt-snowball-plan&#34;&gt;how much money is on them, from smallest to largest, not which one has the highest interest rate&lt;/a&gt;. Dave recognizes that people in debt are humans, and are likely to be more motivated by squashing one debt forever than by paying seemingly never-ending payments on the highest interest rate loan. True, &lt;em&gt;mathematically&lt;/em&gt; it&amp;rsquo;s better to pay off the highest interest rate first. Except the math doesn&amp;rsquo;t mean much when you get disheartened and quit halfway through.&lt;/p&gt;
&lt;p&gt;In other words, the consistency of doing it every day is far more valuable than exactly what&amp;rsquo;s being done. Ray Bradbury &lt;a href=&#34;https://www.youtube.com/watch?v=_W-r7ABrMYU&#34;&gt;seems to agree&lt;/a&gt;, at least as far as writing goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can write one short story a week — it doesn’t matter what the quality is to start — but at least you’re practicing and at the end of the year you have 52 short stories and I defy you to write 52 bad ones. It can’t be done.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;declare-victory-early&#34;&gt;Declare victory early&lt;/h3&gt;
&lt;p&gt;Okay now you have your task list all set, it&amp;rsquo;s Monday morning, and instead of reading this blog &lt;em&gt;like you should be doing**every Monday&lt;/em&gt;, you&amp;rsquo;re working on your side gig.&lt;/p&gt;
&lt;p&gt;You should think of the tasks on your list as toys to retrieve from the bottom of the swimming pool. You want the tasks to be deep enough that it&amp;rsquo;s fun and interesting, but not so deep that you run out of oxygen. There is nothing worse than leaving an open task halfway done for tomorrow - it&amp;rsquo;s not only demotivating, you&amp;rsquo;re likely to lose whatever short term memory you had, and end up completing it slightly incorrectly.&lt;/p&gt;
&lt;p&gt;That means, if it&amp;rsquo;s 8:30 AM and you just knocked out a task, stop now. Yeah, you have another 30 minutes which you &lt;em&gt;could&lt;/em&gt; squeeze something else in. Don&amp;rsquo;t be tempted. Go burn your time on Reddit or Youtube.&lt;/p&gt;
&lt;p&gt;You should be uncharacteristically afraid of starting a task and not finishing it, as that is a textbook sign that you&amp;rsquo;re procrastinating. You also want to get into the habit of not task-switching halfway through something - you&amp;rsquo;re either &lt;em&gt;doing it,&lt;/em&gt; or you&amp;rsquo;re goofing off. Never both.&lt;/p&gt;
&lt;h3 id=&#34;batch-the-shallow-work&#34;&gt;Batch the shallow work&lt;/h3&gt;
&lt;p&gt;As with any other business, there&amp;rsquo;s going to be a lot of housekeeping that needs to be done. My main tip is to avoid this &lt;a href=&#34;https://www.amazon.com/gp/product/1455586692&#34;&gt;shallow work&lt;/a&gt; until you absolutely have to do it, and then do lots of it at once.&lt;/p&gt;
&lt;p&gt;For me, that shallow work is mostly responding to emails - despite Sudopoint being in the early days, we do have a fair number of folks that we&amp;rsquo;re gathering feedback from, soliciting ideas, pushing to expand in specific verticals, and so on. Rather than interrupt deep tasks, I instead set aside time to actually run through every email (&lt;a href=&#34;https://gettingthingsdone.com/&#34;&gt;only once&lt;/a&gt;) and either respond or archive it. Usually I do that during lunch, not during the dedicated deep work sessions in the morning.&lt;/p&gt;
&lt;h3 id=&#34;how-to-get-unstuck&#34;&gt;How to get unstuck&lt;/h3&gt;
&lt;p&gt;One of the downsides to being the only builder is that sometimes you dive under the water on a fairly straightforward task, and then you come up for air and you find you&amp;rsquo;re stuck (maybe under a frozen lake? The metaphor is getting weak now). There&amp;rsquo;s been a few times this has happened at Sudopoint, usually on a part of the project that I just don&amp;rsquo;t understand quite as well, so I can&amp;rsquo;t diagnose and debug as effectively.&lt;/p&gt;
&lt;p&gt;What some people do, which you should not do, is try a whole bunch of stuff on the Internet and hope one of those things worked. The problem with doing that is if you don&amp;rsquo;t understand what you did, you won&amp;rsquo;t be able to debug it later. You&amp;rsquo;re simply exchanging today&amp;rsquo;s technical difficulty with tomorrow&amp;rsquo;s, except that tomorrow&amp;rsquo;s difficulty is likely to be that much more complex to resolve.&lt;/p&gt;
&lt;p&gt;Instead you should buy someone&amp;rsquo;s expertise. It&amp;rsquo;s surprisingly cheap to hire these days. For example, I was seeing performance issues with Django (the python web framework I use), but a single hour-long phone call with the &lt;a href=&#34;https://frankwiles.com/&#34;&gt;head of the Django Software Foundation&lt;/a&gt; gave me exact steps to diagnose and fix the problem (thanks Frank!).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Whatever you think&lt;/em&gt; Frank&amp;rsquo;s hourly rate should be, it was undoubtedly cheaper than spending weeks trying to accumulate that knowledge, or worse, trying to hire cheaper developers who might not know anything but pretend they did.&lt;/p&gt;
&lt;h3 id=&#34;leverage--patience&#34;&gt;Leverage &amp;amp; Patience&lt;/h3&gt;
&lt;p&gt;In the end, you have a bunch of problems to solve, and no matter how much talent you have, your ability to solve those problems is mostly a function of your leverage against them and how long you&amp;rsquo;re willing to work at it. Can you break down the problem into small enough pieces that you can fit it into one of your windows? Does the smaller piece motivate and excite you, or does it seem like homework? Are there places you can buy leverage, rather than needing to depend on your own ability?&lt;/p&gt;
&lt;p&gt;Like anyone else, I have my good weeks and bad weeks. But it appears that my productivity tends to correlate with how closely I follow the rules above. If there are clear tasks, of appropriate scope, I naturally gravitate toward them. If there&amp;rsquo;s a murky mess of problems, but no clear next steps, I spend my week in the fog of confusion, and often drop back into reading the news or watching TV.&lt;/p&gt;
&lt;p&gt;In the end, the mass media aren&amp;rsquo;t going to be &lt;a href=&#34;https://www.cs.virginia.edu/~robins/YouAndYourResearch.html&#34;&gt;on your gravestone&lt;/a&gt;, while your project might be. So hop to it.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Talking to users like a girl scout</title>
      <link>https://ssaraf.com/girl_scout/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/girl_scout/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s assume you&amp;rsquo;ve created something that &lt;em&gt;you&lt;/em&gt; think is the bee&amp;rsquo;s knees. How do you get people to take a look at it?&lt;/p&gt;
&lt;h3 id=&#34;girl-scouts&#34;&gt;Girl scouts&lt;/h3&gt;
&lt;p&gt;The average girl scout sells about &lt;a href=&#34;https://priceonomics.com/the-greatest-girl-scout-cookie-salesperson-ever/&#34;&gt;200&lt;/a&gt; boxes of cookies over the course of an 8 week season. For most fledgling companies, 200 paying users is nothing to sneeze at. So even if you think you&amp;rsquo;re more capable than elementary school girls, the evidence suggests you have a lot to learn.&lt;/p&gt;
&lt;p&gt;Girl scouts have the advantage that their product has already been validated, and they know their market - adults who like to eat cookies. Since their product appeals to almost everyone, it&amp;rsquo;s just a matter of going door to door and asking people to buy it. Here&amp;rsquo;s a quote from one girl scout on how to do that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I had to push and push and push. Sometimes they try to sneak past you and you look them in the eye and make them feel guilty.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;She&amp;rsquo;s not messing around! And the most successful founders I know tend to have a similar approach. They will keep brow-beating until you tell them that you&amp;rsquo;re buying, or tell them exactly what&amp;rsquo;s missing for you to purchase in the future.&lt;/p&gt;
&lt;h3 id=&#34;forward-deployment&#34;&gt;Forward deployment&lt;/h3&gt;
&lt;p&gt;The best example of the girl scout method that I&amp;rsquo;ve seen was while working at a &lt;a href=&#34;https://www.palantir.com&#34;&gt;company that specializes in tools for data analysis&lt;/a&gt;. The company had a platform for building &amp;ldquo;applications&amp;rdquo; for the customer, but it was highly configurable, in a way that today&amp;rsquo;s open-source software is not. For example, moving a button or changing a color usually took seconds for even a non-engineer.&lt;/p&gt;
&lt;p&gt;That meant that we could build &lt;em&gt;exactly&lt;/em&gt; what was needed, fairly quickly. The problem was, we didn&amp;rsquo;t know the customer&amp;rsquo;s needs that well. We were smart, but we weren&amp;rsquo;t experts at whatever industry the customer was in. What &lt;em&gt;were&lt;/em&gt; their problems? What was most urgent? How do they solve the problem today? How much money and time do they spend on it?&lt;/p&gt;
&lt;p&gt;There was only one company-sanctioned way to answer those questions. You flew to wherever the customer was, sat with them (usually in their office), and built the product. Until they were satisfied with what was built, you didn&amp;rsquo;t leave. This was true even if the customer was in Europe or Asia. We used a corporate card to expense countless meals, merchandise, and hotels, optimizing exclusively for whether we could build something valuable for the customer.&lt;/p&gt;
&lt;p&gt;It was pretty wasteful. But the strategy was spot on. While it&amp;rsquo;s almost impossible to build a useful product in a vacuum, it&amp;rsquo;s also almost impossible &lt;em&gt;not&lt;/em&gt; to build a useful product when you spend every day talking to your customer.&lt;/p&gt;
&lt;h3 id=&#34;virality&#34;&gt;Virality&lt;/h3&gt;
&lt;p&gt;In epidemiology, we use a number called R to represent the number of cases directly caused by a single case. COVID-19, for example, apparently &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_reproduction_number&#34;&gt;has an R value&lt;/a&gt; of 2-6, meaning you expect at least a few new cases for every case that you see. Virality in software is the same concept, though I haven&amp;rsquo;t seen it measured quite the same way.&lt;/p&gt;
&lt;p&gt;Seen in that light, it&amp;rsquo;s easy to explain why the typical experience of a startup with a big, banner-filled launch is &lt;em&gt;so bad&lt;/em&gt;. They do &lt;a href=&#34;https://marketingexamples.com/content/drive-traffic-from-hacker-news&#34;&gt;all sorts of shenanigans&lt;/a&gt; to get a large amount of traffic. People see the product, but many of them *collectively**shrug their shoulders, *then move on with their lives. With an R of less than 1, users don&amp;rsquo;t spread it to their friends, so while it might *seem *fine, eventually even lukewarm users churn off the product, and the entrepreneur ends up with bupkis.&lt;/p&gt;
&lt;p&gt;On the other hand, a small launch, with an R of greater than 1, is much more likely to succeed. Your initial users are already cheering for you, they recruit other people, who recruit other people, and so on. It&amp;rsquo;s a positive feedback loop that builds on itself.&lt;/p&gt;
&lt;p&gt;Essentially that means that above some minimum number, your success as a company is much more about &lt;a href=&#34;http://www.paulgraham.com/start.html&#34;&gt;making something people want&lt;/a&gt; than it is about some kind of tricky trick you can use to get lots of people to visit your page. It doesn&amp;rsquo;t really matter, to a first approximation, whether you have 100 users or 1 million. If your R number is high enough, you can simply wait and watch as your users grow exponentially.&lt;/p&gt;
&lt;h3 id=&#34;what-not-to-do&#34;&gt;What not to do&lt;/h3&gt;
&lt;p&gt;That has some practical implications for us. Remember that our goal is to iterate with users as much as possible, and we don&amp;rsquo;t really care about how many we have.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Submitting your project to Hacker News or Reddit will get a lot of anonymous traffic (i.e. people you can&amp;rsquo;t easily talk to), which is exactly the opposite of what you need before you&amp;rsquo;re confident in your R number.&lt;/li&gt;
&lt;li&gt;Similarly, Facebook &amp;amp; Google ads are common mechanisms by which you can &amp;ldquo;add a billboard to the internet highway&amp;rdquo;. But if your initial users aren&amp;rsquo;t bragging for you, you aren&amp;rsquo;t delighting them enough, and your project will die even if you get traffic this way.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You may noticed that I caveated my point above with &amp;ldquo;some minimum number&amp;rdquo;. Why hedge?&lt;/p&gt;
&lt;h3 id=&#34;the-tubes-are-filled-with-customers&#34;&gt;The tubes are filled with customers&lt;/h3&gt;
&lt;p&gt;The Internet is big. Really big. Big enough that you can&amp;rsquo;t actually conceive of all of the people on it at any given time. Apparently 4.5 billion people in the world have access to the internet in some way. And because you&amp;rsquo;re building your little project &lt;a href=&#34;https://ssaraf.com/how-to-build-a-software-company-on-5-hours-a-week/&#34;&gt;on your own&lt;/a&gt; you don&amp;rsquo;t need very many people to buy it before you&amp;rsquo;re making a handsome profit.&lt;/p&gt;
&lt;p&gt;The distribution advantage you get with the internet means you can go after seemingly small markets and still do well. How many people do you need, paying you $20 / month, to support your lifestyle? &lt;a href=&#34;https://kk.org/thetechnium/1000-true-fans/&#34;&gt;1000, at most.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Depending on the problem you&amp;rsquo;re solving, maybe those 1000 people aren&amp;rsquo;t so easy to reach. In those cases, it probably does make sense to &amp;ldquo;spray and pray&amp;rdquo; to share your product as widely as possible, in the hopes that your potential fans recognize and identify themselves. After that, you can reach out to them and ask them for help directly.&lt;/p&gt;
&lt;h3 id=&#34;user-iteration&#34;&gt;User iteration&lt;/h3&gt;
&lt;p&gt;Once you have a few users who agree to have a regular cadence with you, it&amp;rsquo;s time to talk. At least at first, &lt;em&gt;don&amp;rsquo;t talk at all about what you&amp;rsquo;ve built&lt;/em&gt;. It&amp;rsquo;s not about you, it&amp;rsquo;s about them. Here&amp;rsquo;s roughly the script I follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do you have &lt;!-- raw HTML omitted --&gt; at &lt;!-- raw HTML omitted --&gt;?&lt;/li&gt;
&lt;li&gt;If yes, what are your current solutions? How do you deal with &lt;!-- raw HTML omitted --&gt;?&lt;/li&gt;
&lt;li&gt;Interesting - how would you envision a solution?&lt;/li&gt;
&lt;li&gt;Thanks, that makes sense! We had similar thoughts on a solution, specifically on &amp;lt;example 1&amp;gt;, &amp;lt;example 2&amp;gt;, &amp;lt;example 3&amp;gt;. Would you be interested in seeing a prototype?&lt;/li&gt;
&lt;li&gt;Demo the software&lt;/li&gt;
&lt;li&gt;If I asked you to commit $X / month for a license to this product, would you agree to do it?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best part about working in software is that as you talk to users you can change the product on the fly. In that sense, you aren&amp;rsquo;t &amp;ldquo;building an object&amp;rdquo;, you&amp;rsquo;re instead molding around the exact problem that you&amp;rsquo;re trying to solve, and customers are the ones who can tell you what the shape of the mold is.&lt;/p&gt;
&lt;p&gt;Ignore them at your own peril. A lot of people think they know what product needs to exist independent of talking to users. That has about as much success as trying to &lt;a href=&#34;https://en.wikipedia.org/wiki/Delft_tower_experiment&#34;&gt;determine the outcome of an experiment without actually trying it&lt;/a&gt;. As you get more information, you&amp;rsquo;ll build more features. And as you release those features, your not-yet-customers will transition to customers, who will then transition to customers with large R numbers.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>The Keynesian Workweek</title>
      <link>https://ssaraf.com/keynesian_workweek/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/keynesian_workweek/</guid>
      <description>&lt;h3 id=&#34;pawn-shops&#34;&gt;Pawn shops&lt;/h3&gt;
&lt;p&gt;I don&amp;rsquo;t really understand buying complex assets like stocks or bonds. But I understand knick knacks, so we&amp;rsquo;ll start there.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you want to buy a trinket from a pawn shop and sell it to someone else. Everybody knows that, unless you&amp;rsquo;re very lucky, you aren&amp;rsquo;t going to be able to find a price equal to what you paid. The &amp;ldquo;spread&amp;rdquo; on your trinket is the difference between what you can sell it for (say, $10) and what you can buy it for (say, $20).&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re negotiating the price of your trinket with Ole Jimmie. Jimmie knows exactly how much the trinket&amp;rsquo;s worth - 15 bucks. Note that the value of the trinket is *always *somewhere between the bid ($20) and the ask ($10). And all of my finance readers could tell you that this bid-ask spread is a measure of the &lt;em&gt;liquidity&lt;/em&gt; of the market, essentially the &amp;ldquo;price you must pay to &amp;ldquo;liquify&amp;rdquo; an otherwise illiquid asset.&amp;rdquo; [1]&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;tick&amp;rdquo; in our pawn shop example is probably 25 cents. In your negotiation with the old fellar, you can probably offer $19.75 instead of $20 for your trinket. But you probably &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; bid $19.99 instead of $20. The one cent isn&amp;rsquo;t worth it, and he&amp;rsquo;ll smack you if you ask again.&lt;/p&gt;
&lt;p&gt;Unfortunately the &amp;ldquo;tick size&amp;rdquo; means that you might be overpaying for your trinket. The value of the trinket might actually &lt;em&gt;be&lt;/em&gt; $19.90, but you have to pay $20 for it anyway. Practically speaking you can see this happening when an unfortunate soul doesn&amp;rsquo;t have enough money to quite meet the bill, and throws a bunch of pennies on the table in the hope that it gets &amp;ldquo;close enough&amp;rdquo; to be less than a tick away from the actual value.&lt;/p&gt;
&lt;p&gt;Matt Levine has a great take on &lt;a href=&#34;https://www.bloomberg.com/opinion/articles/2020-01-15/it-s-not-insider-trading-if-the-president-does-it&#34;&gt;tick size&lt;/a&gt;, if you want to read more. In the finance world, it&amp;rsquo;s interesting to note that by making the tick size smaller, &lt;em&gt;the market becomes more efficient&lt;/em&gt;. Yeah, read that again.&lt;/p&gt;
&lt;p&gt;Essentially, if Jimmie&amp;rsquo;s willing to round to the nearest dime instead of quarter, the spread on your trinket can shrink. That&amp;rsquo;s good news for both sellers to Jimmie (who get a higher price), and buyers from Jimmie (who get a lower price). But Jimmie, who gets stuck on the wrong side in either deal, misses his boat payment. You can be sure that pawn shop owners won&amp;rsquo;t negotiate to the penny anytime soon.&lt;/p&gt;
&lt;p&gt;One other thing - the size of the tick depends on which market you&amp;rsquo;re in. Equities have a certain tick size, bonds have a different one, and so on. But as we&amp;rsquo;ve seen, financial markets aren&amp;rsquo;t the only place this applies.&lt;/p&gt;
&lt;h3 id=&#34;legal-billing&#34;&gt;Legal billing&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s talk about lawyers. Lawyers sell a service, rather than a physical good, but the way they bill for their time has a lot of similarities to our pawn shop.&lt;/p&gt;
&lt;p&gt;Most lawyers bill at an hourly rate, and they &lt;em&gt;also&lt;/em&gt; have a tick size - some lawyers bill to the nearest quarter of an hour, but most bill to the nearest &lt;a href=&#34;https://www.cand.uscourts.gov/about/court-programs/criminal-justice-act-cja/cja-compensation-rates/billing-increment-chart-minutes-to-tenths-of-an-hour/&#34;&gt;tenth of an hour&lt;/a&gt;. A lawyer that bills $250 / hour therefore has a &amp;ldquo;tick size&amp;rdquo; of $25.&lt;/p&gt;
&lt;p&gt;A couple of things to note:&lt;/p&gt;
&lt;p&gt;The first is that you can&amp;rsquo;t simply hire a lawyer for a single tenth of an hour. Most attorneys have some fixed amount of stuff that you need to purchase from them before they bill you this way - i.e. buy 10 hours worth of my time, then I bill in increments afterwards. Pawn shops have a similar setup - there&amp;rsquo;s a minimum price for everything in the store, and you can be sure it&amp;rsquo;s not a quarter.&lt;/p&gt;
&lt;p&gt;The second is that there is a cost associated with billing at smaller increments. Namely, it&amp;rsquo;s &lt;em&gt;way more annoying&lt;/em&gt; to track your time every 6 minutes. It wasn&amp;rsquo;t worth Jimmie&amp;rsquo;s time to bicker over pennies, but it actually costs lawyers time to track their hours, and that &lt;a href=&#34;https://hbr.org/2015/01/workers-are-bad-at-filling-out-timesheets-and-it-costs-billions-a-day&#34;&gt;cost sets a lower limit&lt;/a&gt; on what the tick size can be. Finance doesn&amp;rsquo;t really have this problem&amp;hellip;the tick size is whatever the exchange says it is, and it can be lowered (or &lt;a href=&#34;https://www.ft.com/content/a16bb892-6ee1-11e2-9ded-00144feab49a&#34;&gt;raised&lt;/a&gt;) relatively easily.&lt;/p&gt;
&lt;h3 id=&#34;step-functions&#34;&gt;Step functions&lt;/h3&gt;
&lt;p&gt;Ultimately that means that any time you sell something, the price to value function is not a continuous one, it&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Step_function&#34;&gt;stepwise&lt;/a&gt;. That is, you to have to sell some discrete additional value before the price goes up, and the price can only go up in increments.&lt;/p&gt;
&lt;p&gt;But most of you aren&amp;rsquo;t lawyers, and probably very few of you have gone to a pawn shop recently. Who cares?&lt;/p&gt;
&lt;p&gt;Actually the service I sell most often is time to my full time employer. And that service is stepwise &lt;em&gt;too&lt;/em&gt;. In fact, to a first approximation, there are only two ways that I can sell my time to most employers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Working as a fulltime employee, 40 hours a week, 48 weeks a year.&lt;/li&gt;
&lt;li&gt;Not working as a fulltime employee, 0 hours a week, 0 weeks a year.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The standard of 5 days a week &amp;amp; 8 hours a day is totally arbitrary, apparently negotiated by labor unions &lt;a href=&#34;https://en.wikipedia.org/wiki/Fair_Labor_Standards_Act_of_1938&#34;&gt;80 years ago&lt;/a&gt;. But that&amp;rsquo;s the market. And due to the nature of this market, I can pretty much only sell (1) to &lt;em&gt;at most&lt;/em&gt; one employer at a given time, and have to put all other employers in the (2) category.&lt;/p&gt;
&lt;p&gt;Now all those inefficiencies about tick size aren&amp;rsquo;t just some intellectual horsepuckey, it&amp;rsquo;s now how I make my living, and the tick size is &lt;em&gt;a mile wide&lt;/em&gt;, and no one&amp;rsquo;s talking about it.&lt;/p&gt;
&lt;h3 id=&#34;keynes&#34;&gt;Keynes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.econ.yale.edu/smith/econ116a/keynes1.pdf&#34;&gt;Keynes hypothesized&lt;/a&gt; that by now, people would be working 15 hours a week, because the average worker productivity would continue to go up, and people&amp;rsquo;s needs would long have been met with just that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thus  for  the  first  time  since  his  creation  man  will  be  faced  with  his  real,  his  permanent  problem-how  to  use  his  freedom  from  pressing  economic  cares,  how to occupy the leisure, which science and compound interest will have won for him, to live wisely and agreeably and well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For  many  ages  to  come  the  old  Adam  will  be  so  strong  in  us  that  everybody  will need to do some work if he is to be contented. We shall do more things for ourselves than is usual with the rich to-day, only too glad to have small duties and tasks and routines. But beyond this, we shall endeavour to spread the bread thin  on  the  butter-to  make  what  work  there  is  still  to  be  done  to  be  as  widely  shared  as  possible.  Three-hour  shifts  or  a  fifteen-hour  week  may  put  off  the  problem for a great while. For three hours a day is quite enough to satisfy the old Adam in most of us!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s within sight right now! Many of the people I know in tech are making &lt;a href=&#34;https://danluu.com/bimodal-compensation/&#34;&gt;more money&lt;/a&gt; than they need. Some have turned to &lt;a href=&#34;https://www.jefftk.com/giving&#34;&gt;donating altruistically&lt;/a&gt;, others are obsessed with &lt;a href=&#34;https://www.mrmoneymustache.com/2018/10/05/the-fire-movement/&#34;&gt;retiring early&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think I like having a regular job. There&amp;rsquo;s something satisfying about chipping away at an important problem, and I like being paid for it. But I would prefer to scale my work time in accordance with my needs. As in, I should be able to work for 3 days a week, and get paid 60% as much. Or in lieu of a 20% raise, I simply don&amp;rsquo;t work on Fridays.&lt;/p&gt;
&lt;p&gt;But I can&amp;rsquo;t do that! Instead, I need to have a tough negotiation with my employer about salary where my needs are met with less than they are already paying me, but other employers pay more, so &lt;em&gt;they&lt;/em&gt; need to pay me more.&lt;/p&gt;
&lt;p&gt;Employers are effectively paying me in both &lt;em&gt;time&lt;/em&gt; and &lt;em&gt;money&lt;/em&gt;. Almost everybody in tech gets 2 days a week off, some salary &lt;strong&gt;X&lt;/strong&gt;, and some equity &lt;strong&gt;Y&lt;/strong&gt;. I simply want to convert the constant &amp;ldquo;2 days&amp;rdquo; into a variable which can be adjusted like the others.&lt;/p&gt;
&lt;h3 id=&#34;unlimited-vacation&#34;&gt;Unlimited vacation&lt;/h3&gt;
&lt;p&gt;Some tech companies have a policy called &lt;a href=&#34;https://medium.com/the-rime-of-the-digital-mariner/the-myth-of-the-unlimited-vacation-policy-7fbdb5f02770#.hxed4covd&#34;&gt;unlimited vacation&lt;/a&gt;, the idea being that you can take as much time off as you want, and everyone will be happy.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m surprised nobody calls this out for the outright lie that it usually is. With a couple of notable exceptions, I can&amp;rsquo;t think of a single person who has successfully pivoted their unlimited vacation policy to working 4 days a week. Since that converts to about 1.5 months of vacation, it&amp;rsquo;s clear there&amp;rsquo;s some kind of cap.&lt;/p&gt;
&lt;p&gt;These vacation policies were only put into place after someone did the math and realized that the average employee will not take the standard amount of PTO. That&amp;rsquo;s especially the case if you force them to ask for it by the day, and have them face the social pressure of the rest of the team &lt;em&gt;not&lt;/em&gt; taking that much time off.&lt;/p&gt;
&lt;h3 id=&#34;contractors&#34;&gt;Contractors&lt;/h3&gt;
&lt;p&gt;I know what you&amp;rsquo;re thinking - Sanjay forgot to talk about contractors. No, I didn&amp;rsquo;t. Being a contractor is great because you can in fact set your price and your time commitment to be anywhere you want, including within the tick size of being a full time employee.&lt;/p&gt;
&lt;p&gt;The problem is that contractors, by definition, can provide end-to-end value completely by themselves. And I can&amp;rsquo;t, at least not &lt;a href=&#34;https://ssaraf.com/p/0e274bab-9315-4158-ab02-416f57f36078/sudopoint.com&#34;&gt;yet&lt;/a&gt;. That&amp;rsquo;s why an Uber driver can be a contractor - all they need is a functioning vehicle and an iPhone and they can provide discrete value. But the value I can provide is much closer to the cog that gets lots of other cogs to run faster / more efficiently. I&amp;rsquo;m valuable within a system, not an end to end system on my own. I suspect that most white collar employees are in the same situation as me.&lt;/p&gt;
&lt;p&gt;And while it&amp;rsquo;s very possible for product managers or developers to work as contractors, you hit the same problem that you hit in any other illiquid market - there&amp;rsquo;s not a *ton *of buyers, so you tend to rely on the same few folks every time you sell your services, which means you may not be getting market value for your service. Sometimes, if you&amp;rsquo;re really good at selling, &lt;a href=&#34;https://www.expatsoftware.com/articles/guy-on-the-beach-with-a-laptop.html&#34;&gt;this can be to your advantage&lt;/a&gt;. Other times, it won&amp;rsquo;t be.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s nothing special about a 40 hour work week. We even have some evidence that workers are not as productive &lt;a href=&#34;https://psycnet.apa.org/record/1975-08475-001&#34;&gt;working 5 days as 4 days&lt;/a&gt; (though in that case, it was the same number of hours). There could be a &lt;a href=&#34;https://en.wikipedia.org/wiki/Laffer_curve&#34;&gt;Laffer curve&lt;/a&gt; like effect on efficiency, and companies today may be on the far right side of the curve.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the deal: you let me work as much as I want to work, and pay me accordingly based on my market rate. If you&amp;rsquo;re a founder / CEO of a business, doing this may help you hire people you never could otherwise.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[1] Thanks to Andrew H for this excellent explanation and broader feedback on drafts of this article!&lt;/em&gt;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>How to get something working even when software hates you</title>
      <link>https://ssaraf.com/software-is-the-worst/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/software-is-the-worst/</guid>
      <description>&lt;p&gt;A lot of folks I talk to are trying to start projects, but don&amp;rsquo;t really know how to get started or what&amp;rsquo;s involved. A comprehensive guide for creating applications is far too long for a post like this, but I thought I&amp;rsquo;d step back and explain the meta-process that I go through to get a project running.&lt;/p&gt;
&lt;h3 id=&#34;assumption-software-sucks&#34;&gt;Assumption: Software sucks.&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s something that engineers and 85 year old grandmas have in common: they know that software is always broken. Computers, when given the choice, will typically do the dumbest thing that is possible to do. Software engineering is therefore an exercise in defining very precise rules for where the electrons can go, and it&amp;rsquo;s still almost impossible to ship software that doesn&amp;rsquo;t end up breaking catastrophically in some way.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t believe me? Pick an application. Open it, and see how long you last before something goes wrong. Most software won&amp;rsquo;t make it obvious that it screwed up - it&amp;rsquo;ll do things like make you repeat whatever you just did, or force you to click in a slightly different spot. And I&amp;rsquo;m sure many of you have acquired a Stockholm-syndrome-like acceptance that in real life if you use a fork it will always poke things and a hanger will always hang things but sometimes if you click on the Chrome button it&amp;rsquo;ll just bounce and then do absolutely nothing while gazing at you with its one weird eyeball.&lt;/p&gt;
&lt;h3 id=&#34;developer-environment&#34;&gt;Developer environment&lt;/h3&gt;
&lt;p&gt;Okay, so let&amp;rsquo;s say you&amp;rsquo;re ready to create something. For now I&amp;rsquo;ll assume that it&amp;rsquo;s a web application, but these steps are the same, if not worse, if you&amp;rsquo;re developing for Windows, iPhones, etc.&lt;/p&gt;
&lt;p&gt;The first problem is that the only way to create software is by &lt;em&gt;using&lt;/em&gt; software, which means anytime you hit problems, you&amp;rsquo;re never sure if your particular issue is related to the software &lt;em&gt;you&amp;rsquo;re building&lt;/em&gt; or the software *you&amp;rsquo;re using. *This issue comes up most commonly when you first start configuring your machine so you can write code effectively.&lt;/p&gt;
&lt;p&gt;While it&amp;rsquo;s theoretically possible to write code by opening up your version of Notepad and typing a few things, no one does it that way anymore. The typical steps are something like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set up a &amp;ldquo;sandbox&amp;rdquo; in which you can install all the dependencies that your code will rely on.&lt;/li&gt;
&lt;li&gt;Install a bunch of dependencies into that sandbox.&lt;/li&gt;
&lt;li&gt;Configure some type of program that helps you write code.&lt;/li&gt;
&lt;li&gt;Start writing code in such a way that it relies on the sandbox&amp;rsquo;ed stuff in the code-writing program of choice.&lt;/li&gt;
&lt;li&gt;Try running the code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that steps 1-3 are not directly related to the software you want to build, and in a non-trivial number of my own projects (probably 90% of them when I was just starting out, but as much as 10% now) I end up hitting bugs or flaws in the process such that I &lt;em&gt;don&amp;rsquo;t actually get to step 4 even after prolonged work.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example, python ships &lt;a href=&#34;https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe&#34;&gt;with at least 6 different ways&lt;/a&gt; of creating &amp;ldquo;virtual environments&amp;rdquo; for sandboxing. That&amp;rsquo;s ignoring a couple of other ways to do it, including what happens to be &lt;a href=&#34;https://docs.docker.com/get-started/&#34;&gt;the most popular way today&lt;/a&gt;. Each approach you take has quirks / bugs / issues which are often but not always addressed by various StackOverflow posts, documentation, or personal debugging.&lt;/p&gt;
&lt;p&gt;Beginners constantly trip on this - they need to fix code written by other people before they&amp;rsquo;ve even written lines of their own. It doesn&amp;rsquo;t help that error messages are usually terrible or not indicative of the specific problem. Many of the errors are actually from other applications you&amp;rsquo;ve installed, for instance.&lt;/p&gt;
&lt;p&gt;Even if beginners do end up finding solutions to these issues, their fixes are often slightly incorrect. They end up in a brittle state and don&amp;rsquo;t understand why their code falls over constantly when no one else&amp;rsquo;s seems to.&lt;/p&gt;
&lt;p&gt;Effectively novices to programming are like novices to cars - looking under the hood is a scary thing and even if you get from point A to B you don&amp;rsquo;t really understand what&amp;rsquo;s happening from first principles. When I talk to experts, this problem doesn&amp;rsquo;t get better - if anything it gets worse. At least in cars there is some level at which you can trust that the thing you&amp;rsquo;re using (like a solid steel beam) is probably going to work like most steel beams and be pretty reliable, but there is almost no level of abstraction in software where you can have the same confidence.&lt;/p&gt;
&lt;p&gt;You would think, of course, that rather than give everyone a broken down jalopy to start with, we could just give everyone working cars and let them start coding - but that&amp;rsquo;s a pipedream and it doesn&amp;rsquo;t exist. Every time a talented software engineer tries to make a better starting car it just transmogrifies into some weird thing for everyone else, which sometimes has more problems than if the engineer had done nothing at all. Or it&amp;rsquo;s some kind of toy which can&amp;rsquo;t be used to build real stuff. You only have to work at a large company a few weeks and see how they set up &lt;em&gt;their&lt;/em&gt; dev environment (which, remember, they have a monetary incentive to make easy) to realize how broken this is.&lt;/p&gt;
&lt;p&gt;Programmers seem to regard this as some kind of law of nature, in that each one is willing to jump through all kinds of ridiculous hoops just to get the first line of code up and running. &amp;ldquo;Hello World&amp;rdquo; is the famed starting place for many programs, but the real thing it&amp;rsquo;s measuring is whether you&amp;rsquo;re set up correctly.&lt;/p&gt;
&lt;p&gt;This is also why many smart engineers are &lt;a href=&#34;https://www.youtube.com/watch?v=svEuG_ekNT0&#34;&gt;pathologically afraid&lt;/a&gt; of software that solves &lt;a href=&#34;https://www.npr.org/sections/thetwo-way/2016/05/26/479588478/report-u-s-nuclear-system-relies-on-outdated-technology-such-as-floppy-disks&#34;&gt;technically straightforward but societally important&lt;/a&gt;&lt;a href=&#34;https://time.com/4261796/tim-cook-transcript/&#34;&gt;problems&lt;/a&gt;. It&amp;rsquo;s just too easy for it to be broken, sometimes by hackers but usually because software is always broken in some way, and all you can do is try to reduce the downside risk of breakage or &lt;a href=&#34;https://en.wikipedia.org/wiki/Permissive_Action_Link&#34;&gt;add something more reliable&lt;/a&gt; to guarantee safety.&lt;/p&gt;
&lt;p&gt;There are no obvious solutions, but my approach is to use as little of other people&amp;rsquo;s software as possible. For instance, I set up the minimal version of a sandbox that I know works and is straightforward for me to debug. I use a package manager that I&amp;rsquo;ve used 100 times before, and I only install libraries which a sufficient number of people have vetted and run themselves. It&amp;rsquo;s only in this manner that I can cut the number of workflow breaking experiences to 10%, but it&amp;rsquo;s always a close call.&lt;/p&gt;
&lt;p&gt;You would think that this would be a common sense approach, but it actually isn&amp;rsquo;t. It&amp;rsquo;s apparently normal for folks to install a whole bunch of crap they don&amp;rsquo;t really use, because that&amp;rsquo;s what the tutorial says, and then find that they&amp;rsquo;re stuck debugging code that&amp;rsquo;s useless for their project. Just to pick a specific example, I load javascript files from a CDN, because it&amp;rsquo;s both faster and easier to debug, but so many people have been trapped in &lt;a href=&#34;https://blog.appsignal.com/2020/04/09/ride-down-the-javascript-dependency-hell.html&#34;&gt;NPM dependency management&lt;/a&gt; that it&amp;rsquo;s become a &lt;a href=&#34;https://xkcd.com/2347/&#34;&gt;joke&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;writing-your-program&#34;&gt;Writing your program&lt;/h3&gt;
&lt;p&gt;When it comes to writing your code you face a new problem: there&amp;rsquo;s precious few practical tutorials about how to build something real. Instead, what exists on the internet today are predominantly lessons on how to build 1) toy programs, usually built in a weird way to make them seem simple or trivial, but rapidly break down when complexity is added or 2) extraordinarily complex programs, usually built in a weird way to support dozens of programmers at large organizations. Both of these are basically useless, since what you&amp;rsquo;re building is something in between. It&amp;rsquo;s not *just *a &lt;a href=&#34;https://medium.com/@deallen7/how-to-build-a-todo-app-in-rails-e6571fcccac3&#34;&gt;todo list app&lt;/a&gt;, it might include user management, relatively complex calculations etc., but it definitely isn&amp;rsquo;t some gargantuan project that needs &lt;a href=&#34;https://endler.dev/2019/maybe-you-dont-need-kubernetes/&#34;&gt;&amp;ldquo;big&amp;rdquo; infrastructure&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;By the way, it&amp;rsquo;s possible that better tutorials exist, but it&amp;rsquo;s impossible to find them. I generally discover links using an aggregator (Reddit, HN, Lobsters, etc) or Google. Effectively both surface the most popular articles measured by either votes or links, but since the largest population of engineers are either 1) trying to play with a new thing or 2) working at a big company, the articles you get mostly cater to those two groups. Anything else you get is some flavor of SEO spam (or as some call it, &lt;a href=&#34;https://blog.hubspot.com/marketing/content-marketing&#34;&gt;content marketing&lt;/a&gt;)- shallow writing that doesn&amp;rsquo;t actually talk about anything, with the hope that search engines will rank it higher. Since the keywords &lt;em&gt;you&lt;/em&gt; use will often be similar to the more popular stuff, there isn&amp;rsquo;t really a way for Google to know that it&amp;rsquo;s doing a bad job.&lt;/p&gt;
&lt;p&gt;I suspect that Goodhart&amp;rsquo;s law has weakened PageRank (or whatever special sauce Google uses) and probably is an opening for a new approach to search that doesn&amp;rsquo;t incentivize &lt;a href=&#34;https://neilpatel.com/blog/commandments-of-internal-linking/&#34;&gt;writing and linking lots of random garbage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So you&amp;rsquo;ve built your project - now what? Now you have to deploy it.&lt;/p&gt;
&lt;h3 id=&#34;putting-bits-on-the-internet&#34;&gt;Putting bits on the internet&lt;/h3&gt;
&lt;p&gt;There exist a variety of tools to deploy your software to the world, but again we see a hole in the market (or at least we saw one historically) for the startup founder / small company builder, who doesn&amp;rsquo;t want to spend a ton of time on dev ops using AWS but needs more than a rudimentary shared hosting setup. &lt;a href=&#34;https://ssaraf.com/p/bcc6db34-596e-44b6-8223-d32e6fa5478b/sudopoint.com&#34;&gt;Sudopoint&lt;/a&gt; is deployed on Heroku, for example, but at one point was deployed on Webfaction, PythonAnywhere, and AWS, mostly to general frustration.&lt;/p&gt;
&lt;p&gt;The main problem is that the core skill set for building an application is usually different from deploying it. In Sudopoint&amp;rsquo;s case, static assets (like CSS or JS) need to be served differently than the rest of the application, the production database is slightly different, environment variables are changed, etc. If I&amp;rsquo;m at all representative of the general programming population, there are an order of magnitude more projects that work perfectly well sitting on my laptop, but I didn&amp;rsquo;t bother to deploy to the world because of the pain / annoyance involved. As usual, these projects have now gone stale and it&amp;rsquo;s unclear if they could ever be deployed, just a sunk cost of learning to build things.&lt;/p&gt;
&lt;p&gt;The only suggestion I have here is to start with a skeleton project that is known for being deployed easily to one of these services, and then rewrite / adjust your application to fit the template. An apt metaphor is removing an appendage because your coat doesn&amp;rsquo;t have enough sleeves, but it&amp;rsquo;s often easier to change what you understand than to try to change what you don&amp;rsquo;t.&lt;/p&gt;
&lt;h3 id=&#34;optimization&#34;&gt;Optimization&lt;/h3&gt;
&lt;p&gt;When you first deploy your app, it&amp;rsquo;s going to be slow. Not slow like the way gmail is slow, where it&amp;rsquo;s obviously doing a whole bunch of stuff and your browser just can&amp;rsquo;t keep up for a couple seconds. By slow I mean, you have a little &amp;ldquo;Hello World&#39; page with almost nothing in it, and it takes 15 seconds to load on your fiber connection.&lt;/p&gt;
&lt;p&gt;Most computer scientists understand Big O notation. It&amp;rsquo;s how we measure what types of algorithms are likely to be slower than others. Unfortunately in matters of web applications (and indeed, for most applications today) Big O notation is not only useless, but &lt;em&gt;worse&lt;/em&gt;, because by paying attention to it you&amp;rsquo;ll optimize the wrong things, and as we know, &lt;a href=&#34;https://wiki.c2.com/?PrematureOptimization&#34;&gt;premature optimization&lt;/a&gt; is the root of all evil.&lt;/p&gt;
&lt;p&gt;What do I mean? At Sudopoint, we were seeing slow load times, and the reason had &lt;em&gt;nothing&lt;/em&gt; to do with the complexity of the computations we were doing, at least at the code level we were working at. Instead, in order, the problems were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Database inserts and reads without indexes&lt;/li&gt;
&lt;li&gt;Unoptimized image, CSS, and JS assets&lt;/li&gt;
&lt;li&gt;Using SQLite instead of Postgres&lt;/li&gt;
&lt;li&gt;Shared hosting instead of more dedicated hosting&lt;/li&gt;
&lt;li&gt;Lacking a CDN&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From my &lt;a href=&#34;https://danluu.com/octopress-speedup/&#34;&gt;research&lt;/a&gt;, our application was not unique in this respect. Most of these were ascertained with a profiler or with something like &lt;a href=&#34;https://www.webpagetest.org/&#34;&gt;webpagetest&lt;/a&gt; but &lt;em&gt;none&lt;/em&gt; of them would have been caught with &amp;ldquo;classic&amp;rdquo; computer science training. Instead it was mostly a matter of putting lots of print statements and simply watching the machine as it went along, and see where it spent a lot of unnecessary time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;That&amp;rsquo;s&lt;/em&gt; the main reason why you should eschew complexity in what you&amp;rsquo;re building. It&amp;rsquo;s not that getting something working using complex architecture is impossible - it&amp;rsquo;ll just take longer. The problem is that if you don&amp;rsquo;t understand every part of the architecture you&amp;rsquo;re using, you won&amp;rsquo;t be able to &lt;a href=&#34;https://www.pitt.edu/~jdnorton/Goodies/Chasing_the_light/&#34;&gt;&amp;ldquo;fly alongside the wave&amp;rdquo;&lt;/a&gt; to figure out what it&amp;rsquo;s doing.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Building a software product on 5 hours a week</title>
      <link>https://ssaraf.com/5_hours_a_week/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/5_hours_a_week/</guid>
      <description>&lt;p&gt;I know that many folks out there (including you, don&amp;rsquo;t lie) are dreamers. You want a creation that not just makes a difference, but is yours. You could make something, put out your shingle, and let people pay you money for it.&lt;/p&gt;
&lt;p&gt;Most of us will fail in that ambition. Certainly I have so far. But now that I&amp;rsquo;ve managed to build a complete product I thought I&amp;rsquo;d capture some of the lessons I learned along the way. This is probably most useful for &amp;ldquo;bootstrapped&amp;rdquo; tech startups, not big companies or lemonade stands or coffee shops, but who am I to stop the friendly reader?&lt;/p&gt;
&lt;h3 id=&#34;are-you-a-developer-if-not-become-one&#34;&gt;Are you a developer? If not, become one.&lt;/h3&gt;
&lt;p&gt;Lots of people, particularly those that went to business school (sorry, I can&amp;rsquo;t help but poke fun), think that creating a software business is as simple as writing down a good idea and merely getting an engineer to build it. Hint: there&amp;rsquo;s a reason that the number of successful software businesses started with Upwork contractors is approximately zero. If cash could reliably be turned into good software then you could put the venture capitalists out of business. Just sit in your room and meditate on ideas, then spend &lt;a href=&#34;https://danluu.com/bimodal-compensation/&#34;&gt;cash&lt;/a&gt; to hire software engineers to build them. How could you lose?&lt;/p&gt;
&lt;p&gt;Instead it&amp;rsquo;s more common for the engineers to have the ideas, start to build them, then come to the VCs so they can grow faster. Instead of coming up with the ideas, the non-technical folks usually help manage existing products or offshoots, not build new ones from scratch. There are exceptions of course, but the successful entrepreneurs tend to look a lot more like &amp;ldquo;engineers who have business ability&amp;rdquo; than &amp;ldquo;business people who hired engineers&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Why is that? I suspect that while many folks can build a solution to an arbitrary problem, they vary quite widely in their ability to define the problem well.&lt;/p&gt;
&lt;h3 id=&#34;know-your-stuff---create-a-circle-of-competence&#34;&gt;Know your stuff - create a circle of competence&lt;/h3&gt;
&lt;p&gt;Building a product in software is an exercise in knowing where to deep dive and where to be satisfied with reasonable defaults. The types of decisions you make on the fundamentals (what language &amp;amp; framework, do users need to be logged in to try it, etc) actually end up changing the user experience dramatically.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you aren&amp;rsquo;t an engineer. The problem isn&amp;rsquo;t that you aren&amp;rsquo;t smart enough (you probably are - this stuff isn&amp;rsquo;t &lt;em&gt;that&lt;/em&gt; complicated) but instead that you don&amp;rsquo;t even understand the paradigm by which you&amp;rsquo;ll be making decisions.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s like trying to bake a cake without going into the kitchen. You can&amp;rsquo;t ask for &lt;a href=&#34;https://sallysbakingaddiction.com/vertical-cake/&#34;&gt;vertical lines&lt;/a&gt; instead of horizontal ones, without profoundly changing how the whole thing is built!&lt;/p&gt;
&lt;p&gt;As you might expect, one &lt;a href=&#34;https://en.wikipedia.org/wiki/Circle_of_competence&#34;&gt;circle of competence&lt;/a&gt; for a company building software is the &lt;em&gt;building software&lt;/em&gt; part. The market pays for outsize value - something a lot of these no-code based companies don&amp;rsquo;t realize. Yes, there&amp;rsquo;s a lot of lego blocks out there which you can assemble together, but the real value you&amp;rsquo;re selling is the glue between those blocks. And since the glue is made out of software too, you still need that body of expertise.&lt;/p&gt;
&lt;p&gt;For the software engineers, I have a dose of reality for you too: in my experience, businesses started by engineers sometimes suffer the opposite problem - they are technically interesting, but not worth paying for.&lt;/p&gt;
&lt;p&gt;The amount of engineering time being spent &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_programming_languages&#34;&gt;creating new programming languages&lt;/a&gt;, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks&#34;&gt;writing new javascript frameworks&lt;/a&gt; is astonishing. Building something with a different developer experience but no user-facing impact means you don&amp;rsquo;t have anything to sell. You&amp;rsquo;ve improved the ecosystem but haven&amp;rsquo;t actually put food on the table. And indeed, many of these creators, despite the value they&amp;rsquo;ve provided, are still living off of Patreon or Kickstarter. And while it might work for some, others are still &lt;a href=&#34;https://theoutline.com/post/2571/no-one-makes-a-living-on-patreon&#34;&gt;struggling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You don&amp;rsquo;t just need a circle of competence in software, but one in the area that you are trying to innovate in. If you&amp;rsquo;re making software that creates bingo cards, you have to understand that your users often search for &lt;a href=&#34;https://www.kalzumeus.com/2006/07/29/on-page-seo-for-small-companies/&#34;&gt;dolch sight words&lt;/a&gt;. It&amp;rsquo;s the &lt;a href=&#34;https://dilbertblog.typepad.com/the_dilbert_blog/2007/07/career-advice.html&#34;&gt;combination of the two areas&lt;/a&gt; that actually make your product rare and valuable.&lt;/p&gt;
&lt;h3 id=&#34;find-the-time&#34;&gt;Find the time.&lt;/h3&gt;
&lt;p&gt;A lot of people look at me in wonder when I describe building a product while working a full time job. Don&amp;rsquo;t you already have too much to do? Do you not have a personal life?&lt;/p&gt;
&lt;p&gt;Paul Graham goes as far as to suggest that working on other things would &lt;a href=&#34;http://www.paulgraham.com/die.html?&#34;&gt;lead to your startup&amp;rsquo;s death&lt;/a&gt;. It has now become quite common for people to leave high paying jobs to start companies, but often they don&amp;rsquo;t really know what company they&amp;rsquo;re starting, or why. Starting a company has become a kind of personal exploration in which, at the end of it, even if the startup doesn&amp;rsquo;t succeed, it&amp;rsquo;s okay. The specifics of what you learn are never very clear, but people seem to be pretty happy doing it, so I hesitate to criticize.&lt;/p&gt;
&lt;p&gt;That said, I think the approach is flawed. Many of the &lt;a href=&#34;https://www.theatlantic.com/technology/archive/2019/02/and-then-there-was-thefacebookcom/582004/&#34;&gt;best&lt;/a&gt; companies were started as side projects, and that was before all of the swanky libraries and deployment infrastructure that is in common use today. I think the startup world is under the impression that you can only build something productively if you&amp;rsquo;re working 60 hours a week on it. Why 60? Why not 30? Why not 10? Isn&amp;rsquo;t one 60 hour week just a month and a half of 10 hour weeks? More importantly, can we build something in 10 hours today that would have taken 60 before?&lt;/p&gt;
&lt;p&gt;I suspect that while startups can move faster, at least in calendar time, working all day every day, they actually move far less &lt;em&gt;efficiently&lt;/em&gt;. That is, little old me on a 10 year old Macbook pro, working &lt;em&gt;solely in the hour before breakfast on weekdays&lt;/em&gt;, can simply outlast a sprinting rockstar programmer working for 100 hour weeks on ramen and coffee. That&amp;rsquo;s the real benefit - the rockstar programmer is dependent on finding someone to invest in him or her, has to find product market fit within a short amount of time, has to figure out hiring and legal and incorporation, etc. Because it&amp;rsquo;s just me, I only have to do the first one.&lt;/p&gt;
&lt;p&gt;Classic software entrepreneurs are busy trying to &amp;ldquo;build a plane while flying it&amp;rdquo;. And as glorifying as that might seem, the plane you build is probably worse than it should be. Meanwhile, I&amp;rsquo;m happily tinkering on my own plane, and I have infinite runway because my day job pays all of my expenses and more.&lt;/p&gt;
&lt;p&gt;Prove your grit as an entrepreneur by starting your company while you&amp;rsquo;re working. Find the time. Depending on who you are, that could be late at night, early in the morning, during lunch, etc.&lt;/p&gt;
&lt;h3 id=&#34;maximum-power-in-minimal-lines-of-code&#34;&gt;Maximum power in minimal lines of code&lt;/h3&gt;
&lt;p&gt;The main value in being a solo entrepreneur is that you don&amp;rsquo;t have any of the overhead that happens at larger companies. The main downside? You don&amp;rsquo;t have any of their &lt;em&gt;resources&lt;/em&gt; either. Large companies like Google have amazing stuff they never release to the public, so writing code there is always going to be so much more joyful than writing it on your own. You get a sweet developer environment, can provision boxes on your own, and there are massive departments dedicated to looking after you. Of course you have the catering people, but also the operations people, the tools people, the product people, the design people, etc. Even if all those folks are dunderheads (which they aren&amp;rsquo;t) you&amp;rsquo;re not going to be able to replicate it solo.&lt;/p&gt;
&lt;p&gt;They&amp;rsquo;re fabricating steel beams over there, and it&amp;rsquo;s frankly far beyond your capacity. Don&amp;rsquo;t try, or you&amp;rsquo;ll get stuck TIG welding a corner piece. You&amp;rsquo;re building out of papier maché. It&amp;rsquo;s cheap, it&amp;rsquo;s soft, it&amp;rsquo;s easy to adjust. No, it probably won&amp;rsquo;t scale - but if you have too many users, you&amp;rsquo;ll figure out how to deal with that problem (and it&amp;rsquo;s hard even with steel beams).&lt;/p&gt;
&lt;p&gt;Your main weakness is you only have 5 hours a week on this project, and Google has, effectively, millions. But your strength is that you can do things that Google can&amp;rsquo;t. Remember those open-source lego blocks that were in the wild? You can use those in a way that Google never could, because they fully meet your needs and then some, whereas virtually &lt;em&gt;everything&lt;/em&gt; in the open source world (including Google&amp;rsquo;s own open source contributions) aren&amp;rsquo;t good enough within their ecosystem. At least, not by themselves.&lt;/p&gt;
&lt;p&gt;So your job isn&amp;rsquo;t to reinvent the wheel better than they can. It&amp;rsquo;s to cobble together a few spare parts, and see if your little local entropy reduction is worth more than it cost.&lt;/p&gt;
&lt;h3 id=&#34;build-vs-buy-always-buy&#34;&gt;Build vs Buy? Always Buy.&lt;/h3&gt;
&lt;p&gt;This kind of goes with the last one, but I&amp;rsquo;ll say it more explicitly. You should be spending your &lt;a href=&#34;https://mcfunley.com/choose-boring-technology&#34;&gt;innovation tokens&lt;/a&gt; as carefully as possible when starting your own project. And those tokens &lt;em&gt;probably&lt;/em&gt; should be spent on the things the user cares the most about, and not the other stuff (i.e. the user does not care about your dry cleaning).&lt;/p&gt;
&lt;p&gt;Here are a few things in the dry cleaning category (which you should almost certainly buy, unless it&amp;rsquo;s the core competence of your business):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deployment infrastructure&lt;/li&gt;
&lt;li&gt;Company email addresses&lt;/li&gt;
&lt;li&gt;Marketing emails&lt;/li&gt;
&lt;li&gt;Blog&lt;/li&gt;
&lt;li&gt;Payment infrastructure&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a fellar starting out with a business the size of a beta fish, this stuff should cost less than your weekly date night. Remember that much larger orgs are using this infrastructure too, so you can always tell yourself that &lt;!-- raw HTML omitted --&gt; as a way of resting easy, and leave whatever special snowflake features you have in mind for your ideal system to your imagination instead of holding up your product development.&lt;/p&gt;
&lt;h3 id=&#34;cut-scope&#34;&gt;Cut scope&lt;/h3&gt;
&lt;p&gt;Software is an interesting thing, because you can change the problem more easily than you can change the solution. That means you can make life &lt;em&gt;really&lt;/em&gt; hard for yourself by being too ambitious and wanting an app that not only solves the user&amp;rsquo;s problem, but also cooks their dinner, turns on the Al Green, and gives foot massages. &lt;strong&gt;Eliminate the excess&lt;/strong&gt;. The reason why is not because you don&amp;rsquo;t want to delight the user. You definitely do. But it&amp;rsquo;s better to have a pretty good solution to one problem than a half solution to 10.&lt;/p&gt;
&lt;p&gt;Practically speaking what this means is that you&amp;rsquo;ll build something that kinda works, and you&amp;rsquo;ll debate between doing some housekeeping that is absolutely necessary (completing your &lt;a href=&#34;https://stripe.com/&#34;&gt;payment infrastructure&lt;/a&gt;, for example) or adding feature Y. Always do the necessary stuff first. Then ship it. Most of the work is after you&amp;rsquo;ve built the product, after all, and your time is too limited to spend on features that aren&amp;rsquo;t absolutely necessary. Those 5 hours go by pretty quickly.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>The power of names</title>
      <link>https://ssaraf.com/power_of_names/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/power_of_names/</guid>
      <description>&lt;p&gt;The power of names is really interesting to me. Sometimes it seems like concepts that previously were muddled become much more simple to understand once you give it a unique set of phonemes that others can reference.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll give an example from work recently. A few weeks ago I was given an assignment that was rather broad in scope. It was unclear (and is still unclear, as of this writing) exactly what the eventual product will look like. But we needed some kind of framing to help us grapple with the complexity.&lt;/p&gt;
&lt;p&gt;I decided to make something up. I roughly bucketed the 4 types of workflows that I thought we would want to support, and I named each one.&lt;/p&gt;
&lt;p&gt;What happened next somewhat surprised me. Not only was my method of categorizing rapidly spreading around the organization, but the paradigm with which I used to make them spread too. It was like I had performed inception on an entire organization, just by giving something a unique name and definition.&lt;/p&gt;
&lt;p&gt;A lot of other things now begin to lock into place. For instance, why do medical conditions seem to be fractally deep? It feels like there are new &amp;ldquo;types of types of &amp;quot; cancer every year. Not because more people are diagnosed, but because by attaching a name to a specific set of data, we can grapple with it more easily and, hopefully, find patterns.&lt;/p&gt;
&lt;p&gt;What about religion or philosophy? There&amp;rsquo;s nothing more common than an academic philosopher taking a perfectly ordinary concept and trying to name it. Even the name &amp;ldquo;God&amp;rdquo; itself is just a bucket of ideas which are not only difficult to express, but some argue can only be felt or sensed, rather than measured.&lt;/p&gt;
&lt;p&gt;In a way, a name is merely a pointer to an idea in the same way that pointers can tie to arbitrarily large and complex objects in computer systems. But why use a name? The same reason you would want to use a pointer. It&amp;rsquo;s easier and cheaper to pass it around, and everyone can immediately understand what it means just by dereferencing. Names as a new form of primitive can be combined and understood much more deeply, at least by our limited human minds.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Minimize the distance from idea to execution</title>
      <link>https://ssaraf.com/idea_to_execution/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/idea_to_execution/</guid>
      <description>&lt;p&gt;My company is getting more and more &amp;lsquo;political&amp;rsquo;. If you wanted to do something new, you used to have to spend weeks getting the proper permissions / sign offs from the relevant leadership, ensure they were bought in to the vision of your project, talk to the resourcing team to make sure you had the critical materials and personnel, talk to legal to ensure they wouldn&amp;rsquo;t block you later, etc.&lt;/p&gt;
&lt;p&gt;Nowadays that process takes &lt;em&gt;months&lt;/em&gt;. Based on conversations with friends at  larger companies, the process is even longer there. That&amp;rsquo;s not necessarily a bad thing - by forcing so much consensus the company tends to build things in line with the existing business objectives. And because those business objectives fluctuate rapidly (at least from an executive&amp;rsquo;s perspective) the company size usually scales with how &amp;ldquo;top-down&amp;rdquo; the decision making becomes.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s been interesting is observing how the increase in delay has changed the ability of the team on the ground to be effective. The more the organization tries to influence a team, the slower it seems to go. Why is that? What actually takes up their time?&lt;/p&gt;
&lt;p&gt;My argument would be that a lot gets &lt;em&gt;lost in translation&lt;/em&gt;. That is, when the project lead describes what is being worked on to leadership, the leaders don&amp;rsquo;t actually have a &lt;a href=&#34;https://ssaraf.com/be-tangible.html&#34;&gt;tangible understanding&lt;/a&gt; of what&amp;rsquo;s happening. But they think they do. And so rather than one unified perspective on what the product should look like, there are several competing perspectives. The project lead him or herself can&amp;rsquo;t distinguish between which vision is right, and so he / she ends up building a melded version of several visions at once.&lt;/p&gt;
&lt;p&gt;In most cases, I would argue that the project lead would be better off ignoring the leadership (politely) and just building the v0 or a set of mocks that accurately represents the current plan. When developing a product it&amp;rsquo;s hard to &lt;em&gt;describe&lt;/em&gt; what the thing should do and much easier to just &lt;em&gt;show what it does&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One example came up in work a couple weeks ago. I had described a mechanism to accomplish something that everyone wanted done, but my descriptions were not specific enough for the team leads to understand what I was saying &lt;em&gt;to a degree they could act on it&lt;/em&gt;. When I finally made a simple example and sent it to them, I could almost hear the &amp;ldquo;oh, &lt;em&gt;this&lt;/em&gt; is what you meant!&amp;rdquo; go off in their heads. And weeks of back and forth ended almost immediately.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s another aspect to this which I want to explore more. It&amp;rsquo;s almost as if a promising idea is a pure, concentrated thing at first. It&amp;rsquo;s exciting to go after, one is confident it&amp;rsquo;ll be successful, its scope is small, etc. As more people contribute to the idea to feels like it gets diluted somehow. Not that the contributions are bad, per se, but by adding on so many appendages it becomes this huge monster that&amp;rsquo;s much harder to execute on. In that sense, doubling the functionality (before the initial version exists) usually quadruples the amount of development time. That would explain what happens when the functionality demands continue to rise - velocity of the engineering team asymptotically approaches zero.&lt;/p&gt;
&lt;p&gt;The idea that good contributions to a project idea could end up killing it is a counterintuitive one. It reminds me of Warren Buffett&amp;rsquo;s way of prioritizing tasks&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Write down a list of your top 25 priorities in the next year in order of most important to least important. Circle the first 5. The other 20 now become your &lt;em&gt;avoid at all costs&lt;/em&gt; list.&amp;rdquo;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Problems and solutions</title>
      <link>https://ssaraf.com/problems_and_solutions/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/problems_and_solutions/</guid>
      <description>&lt;p&gt;Something I&amp;rsquo;ve noticed recently is that problems become a lot easier to solve if you describe them in detail. That is, attempting to solve a vague, multi-faceted issue is practically impossible, but cutting it down to a set of discrete problems seems to make it much more digestible. Part of this is, no doubt, that we make things more &lt;a href=&#34;https://ssaraf.com/be-tangible.html&#34;&gt;tangible&lt;/a&gt;, but I think there&amp;rsquo;s more to it that that.&lt;/p&gt;
&lt;p&gt;Why is it, for instance, that the solved problems in a particular field of study are well known, but it&amp;rsquo;s not obvious what the unsolved problems are? My understanding is that even talented scientists have to &amp;ldquo;load into their head&amp;rdquo; the full landscape of known work in order to figure out where the gaps are. If they tried to describe ALL the gaps, they&amp;rsquo;d never stop - the number of problems that could be worked on is infinite.&lt;/p&gt;
&lt;p&gt;And while that is strictly true, I still think more could be done there. It&amp;rsquo;s pretty clear that, for example, theoretical physicists don&amp;rsquo;t have a ton of variance in what they work on. If we asked one to describe &amp;ldquo;what are the interesting unsolved problems in your field &lt;em&gt;that people are working on&lt;/em&gt;&amp;rdquo; the list wouldn&amp;rsquo;t be that long.&lt;/p&gt;
&lt;p&gt;So it seems that between the illumination of our existing knowledge and the darkness of the unknown there is a silver lining where humanity is bustling, trying to spread a little further beyond. Seemingly the only way to know where that silver lining is&amp;hellip;is to go to graduate school.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part of me wishes that comprehensive, detailed descriptions of the unsolved problems in a given field were published in the same way that our solutions currently are.&lt;/strong&gt; It&amp;rsquo;s not obvious to me how possible this is, but the current attempts are quite crude [1] and I think by enumerating the problems clearly, we&amp;rsquo;d be able to surmise solutions more quickly.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1] Dev. &amp;ldquo;Unsolved problems in biology - The state of current thinking&amp;rdquo; &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S0079610715000115&#34;&gt;Progress in Biophysics and Molecular Biology&lt;/a&gt;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Get bored</title>
      <link>https://ssaraf.com/get_bored/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/get_bored/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been thinking and talking about side projects for a long time. Now is the first time I&amp;rsquo;ve shipped something that 1) actually works and 2) has at least a snowball&amp;rsquo;s chance of becoming something people use.&lt;/p&gt;
&lt;p&gt;Why is that? I now get bored.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t used to. It always felt like there was an infinite number of things to read on the internet and an infinite number of TV shows to watch. Of course, I would mostly reread the same websites and rewatch the same shows. Not hard for a journey to be infinite if you go in a loop.&lt;/p&gt;
&lt;p&gt;My work was also&amp;hellip;intense. It wasn&amp;rsquo;t at all unusual to work 12 hour days, in a country where I knew almost no one, return to the paid-for corporate apartment, eat some food on the company card, go to the gym wearing a company shirt, and go to sleep, repeat. Nowadays I almost always finish work at 6 PM, so I have a lot more free time than before.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure what made me decide to break out of the loop. But I began treating it as an addiction. I considered myself to have absolutely no ability to enjoy such things in moderation, and that the only path was to teetotal my way to freedom.&lt;/p&gt;
&lt;p&gt;And I found myself to have lots of time. Hours and days that used to fly by suddenly went terribly slowly. Have you ever spent a day without internet, or TV, and nothing to occupy your time? I worked out, played my guitar, called friends on the phone, wrote, and programmed [1]. Once I&amp;rsquo;d been doing this for a few weeks, it became a &lt;a href=&#34;https://ssaraf.com/momentum-equals-habit.html&#34;&gt;habit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So if I had to provide some advice on how to be productive in something that isn&amp;rsquo;t your day job, that&amp;rsquo;d be my recommendation. Don&amp;rsquo;t bother trying to get &amp;ldquo;motivated&amp;rdquo;, or to find some secret pseudo-scientific trick that&amp;rsquo;ll make you more productive. In fact, you can start now. Close this browser window, sit in a chair, and stare at the wall for 15 minutes. If you&amp;rsquo;re anything like I was, you won&amp;rsquo;t be able to do it without checking your phone within a few minutes.&lt;/p&gt;
&lt;p&gt;I suspect that screen addiction will be seen as smoking was in the previous generation. If you were to ask a former smoker why they smoked, they would say &amp;ldquo;it&amp;rsquo;s just what everyone was doing&amp;rdquo;, &amp;ldquo;we did it to pass the time&amp;rdquo;, &amp;ldquo;we did it to socialize with other people&amp;rdquo;, and &amp;ldquo;it was fun&amp;rdquo;. All things you could say about the internet today.&lt;/p&gt;
&lt;p&gt;What scares me a little bit is how complete the conspiracy seems to go. I can think of hardly anyone who doesn&amp;rsquo;t spend the vast majority of their free time watching tv or reading the internet. Even people who enjoy the outdoors, or play music, or cook, or are getting ready to have kids. It all seems to be in service of, ultimately, an arrangement of pixels on a screen.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1] Programming seems like an unusual thing to be proud of doing, given my rant about screen addiction. I don&amp;rsquo;t consider &lt;em&gt;reading or watching&lt;/em&gt; to be the same thing as &lt;em&gt;writing or creating&lt;/em&gt;. To me, the latter is much, much harder.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Momentum equals habit</title>
      <link>https://ssaraf.com/momentum_equals_habit/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/momentum_equals_habit/</guid>
      <description>&lt;p&gt;Novices to finance are always amazed at how powerful compound interest is. Once they become aware, it becomes much easier to explain why they should pay off high interest loans as quickly as possible, and not keep too much cash lying around that isn&amp;rsquo;t gathering interest.&lt;/p&gt;
&lt;p&gt;But people are always slow / hesitant to apply the same knowledge to other aspects of their lives. Regular, steady contributions (even mediocre ones) will outgrow and crush the sprinters. The tortoise always beats the hare.&lt;/p&gt;
&lt;p&gt;When I first started going to the gym it was a huge struggle. I set myself a goal, which perhaps could help you too - go to the gym, even if it&amp;rsquo;s only for 15 minutes, and even if you just play pool in the lounge and read your phone, &lt;em&gt;every&lt;/em&gt; day. What you&amp;rsquo;ll find, as I did, is that after a few days of this you&amp;rsquo;ll say to yourself &amp;ldquo;well maybe I can do just one exercise, maybe I&amp;rsquo;ll play some basketball&amp;rdquo;. A week later, you might start fiddling around on one of the machines. A week later, free weights. You&amp;rsquo;ll get fitter and fitter, and if you look at the amount of exercise, either by intensity or by length of workout, it&amp;rsquo;ll start to look exponential.&lt;/p&gt;
&lt;p&gt;Eventually, of course, it&amp;rsquo;ll level off. None of us are super saiyans. What really happens is that your initial discipline will rapidly get you to a new minimum fitness level which you can maintain or increase over time, and now going to the gym is habitual, rather than motivation based. The curve looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%7Bfilename%7D/images/motivation_habit.png&#34; alt=&#34;S curve&#34;&gt;&lt;/p&gt;
&lt;p&gt;This curve happens everywhere in biology - and biologists talk about things that &amp;ldquo;shift the curve left&amp;rdquo; (which speeds up the exponential phase) or &amp;ldquo;shift the curve right&amp;rdquo; (which makes it longer). Your effort, on the other hand, looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%7Bfilename%7D/images/effort.png&#34; alt=&#34;Negative saturation curve&#34;&gt;&lt;/p&gt;
&lt;p&gt;The second curve isn&amp;rsquo;t a surprise either - for instance, the first curve can represent hemoglobin - oxygen binding, and the second curve represents how much oxygen is present in substrate.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think this is an accident. When we descibe &amp;ldquo;habit&amp;rdquo; we&amp;rsquo;re only describing the mental infrastructure that guides our actions as humans. You wake up in the morning, and if you eat breakfast every day, you begin to reinforce neural pathways that are involved in that: your hypothalamus and stomach secretes hormones related to digestion and hunger, your brain pushes the parasympathetic nervous pathways that allow you to digest the food, etc. If you don&amp;rsquo;t eat breakfast, those pathways begin to wither - or more precisely, activating them is on the exponential part of the S curve: you have to force yourself to eat, because you aren&amp;rsquo;t hungry.&lt;/p&gt;
&lt;p&gt;We probably already know this subliminally - if you play video games every day, it doesn&amp;rsquo;t take an extraordinary amount of effort to play them today. But if you never play them, you&amp;rsquo;ll rarely want to, even if you could. The more sugar you eat, the more you crave sugar. Regular wine drinkers find cracking the next bottle easier. Etc. Same with chess or exercise or programming or&amp;hellip;writing.&lt;/p&gt;
&lt;p&gt;I have no immediate solution if you can&amp;rsquo;t get yourself to do the first 15 minutes, though. Certainly I&amp;rsquo;ve wanted to start a blog for &lt;em&gt;years&lt;/em&gt;, and never executed, and many of the side projects I&amp;rsquo;m pursuing now are ideas that have been bouncing around my head since my old college days. No time like the present, I guess.&lt;/p&gt;
&lt;p&gt;The one thing I will say, which is reinforced in the math, is that the first day is always the hardest, and then the second day is the second hardest&amp;hellip;until the curve flips. When it does, you&amp;rsquo;ll find it&amp;rsquo;s actually harder &lt;em&gt;not to do&lt;/em&gt; the thing than it is to do it - your neurons don&amp;rsquo;t seem to distinguish between action and inaction. That means starting bad habits is just as hard as ending them. That knowledge is comforting, somehow.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Side projects</title>
      <link>https://ssaraf.com/side_projects/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/side_projects/</guid>
      <description>&lt;p&gt;Over the past couple months I&amp;rsquo;ve been declaring all of my side projects to my current employer. It&amp;rsquo;s been a very interesting experience, because, strictly speaking, I don&amp;rsquo;t work for them as an engineer.&lt;/p&gt;
&lt;p&gt;Joel Spolsky has written an interesting &lt;a href=&#34;https://www.joelonsoftware.com/2016/12/09/developers-side-projects/&#34;&gt;note about side projects&lt;/a&gt;. His main thesis is that, from a legal perspective, employers have to &lt;em&gt;try&lt;/em&gt; to own all inventions by engineers, to protect themselves when they seek future liquidity (say, in an IPO or major investment round). Folks in management or strategy roles don&amp;rsquo;t usually sign such agreements because they aren&amp;rsquo;t seen as creators of company intellectual property, and I didn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;So why ask permission? Mainly because I want a nice document in writing saying that they&amp;rsquo;re okay with me working on the side, and exactly what criteria I have to abide by in order to continue doing so (I can&amp;rsquo;t hire colleagues to work with me, for instance). I would not even consider using such a document in court - even when I&amp;rsquo;m legally in the clear, my ability to prevail against a large company is effectively nil. It&amp;rsquo;s mostly because, so long as the executives who I checked in with remain at the company, it&amp;rsquo;ll be clear that the decision to let me do this was on them. If something changes, say one of my projects becomes dramatically successful and they would like a percentage&amp;hellip;the same executives would have to judge themselves as bad decision makers. In my experience this never happens, especially when the decision is in writing.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve now completed my first side project. Check it out &lt;a href=&#34;https://www.solovine.com/&#34;&gt;here&lt;/a&gt;. It follows on the heels of my note about creating a modern, software version of the &lt;a href=&#34;https://ssaraf.com/a-modern-olympia-academy.html&#34;&gt;Olympia Academy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a few things I noticed when building this. First of all, as a diligent reader of this blog might also have observed, I wrote a lot more. There&amp;rsquo;s something about being in the process of doing something that unlocks creativity in other realms. I&amp;rsquo;d like to explore this more in a future essay.&lt;/p&gt;
&lt;p&gt;Second of all, my day job was affected, but not in the way you&amp;rsquo;d think. In terms of raw output, I was more productive. In some ways I suffer from a form of perfectionism; if I&amp;rsquo;m not sure the outcome is going to be good, I&amp;rsquo;d rather procrastinate on delivering the outcome at all. 99% of the time this is a bad thing - executing is usually the best way to get something to perfection, rather than just thinking about it. Because I had limited time each day to work on my side project, I would move as fast as possible to go from idea to working code. And somehow, since I was in that mode, I would stay in that mode at my actual job - I delegated faster to members of my team, and for the items I was individually responsible for, I got it done, &lt;em&gt;fast&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So maybe this side project gig has positive externalities outside of its intrinsic value. That would be nice, since I have no idea at all if it even has intrinsic value - I&amp;rsquo;ve built a working v0 and found that unsurprisingly, no one cares about it yet.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Holding it all in your head</title>
      <link>https://ssaraf.com/holding_in_your_head/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/holding_in_your_head/</guid>
      <description>&lt;p&gt;Something I&amp;rsquo;ve noticed when working on larger programming projects is that my ability to add new code depends on what stage of the project I&amp;rsquo;m at. Early on, the code comes out fast. However, as time goes on and the project gets bigger, I find that it takes me up to an hour to &amp;ldquo;load the program into my head&amp;rdquo; before I can begin to add new features.&lt;/p&gt;
&lt;p&gt;Good code is read most often by the writer, not by the computer. So if you keep your codebase concise and simple, you win twice: 1) it takes less time to read and understand and 2) it&amp;rsquo;s easier to modify. Perhaps that&amp;rsquo;s why experienced software engineers advise you to &lt;em&gt;pick a boring stack&lt;/em&gt;, particularly for projects you&amp;rsquo;re starting on your own.&lt;/p&gt;
&lt;p&gt;Certainly for me, the excitement of a new language or library often drives my initial interest in a project. It turns out this is stupid. Very soon afterward, I find myself blocked in an ever continual parade of stack overflow posts and difficult to comprehend bugs. For a while I thought I was &lt;em&gt;learning&lt;/em&gt; by going through this process. I usually wasn&amp;rsquo;t, because the new library did something I already knew how to do, just in a more fashionable way.&lt;/p&gt;
&lt;p&gt;Does this principle apply to anything else? Yes, it does - it applies to pretty much all of my creative endeavors, including writing. If I try to write in a sophisticated, &amp;ldquo;wise&amp;rdquo; way, I find that it takes me a lot longer to load the dialogue into my head, improve it, and finalize it. The only reason this blog is beginning to gain momentum now is because I gave up on trying to write that way.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the scary thing. My writing is not just easier, it&amp;rsquo;s better than it was before. By using my natural voice and not coming off so stilted, I can approach topics and think more deeply through problems; I no longer have to think in a foreign language, so my focus is on the topic at hand rather than the words I&amp;rsquo;m using.&lt;/p&gt;
&lt;p&gt;In any case, if you&amp;rsquo;ve been tracking the projects I&amp;rsquo;m working on, you should expect the number of interesting libraries I use to go &lt;strong&gt;down&lt;/strong&gt;. Sorry, the goal for me is a piece of software that accomplishes a goal, not source code that adheres most to the fashion of the day. And you can expect that I&amp;rsquo;ll be more productive as a consequence.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Be tangible</title>
      <link>https://ssaraf.com/be_tangible/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/be_tangible/</guid>
      <description>&lt;p&gt;Something that I see again and again is mistaking imprecision for wisdom. For instance, if I asked you: &amp;ldquo;go out and get 10 more users&amp;rdquo;, that&amp;rsquo;s a tangible, easy to understand goal. If I tell you, &amp;ldquo;we need to increase penetration of our software&amp;rdquo;, then you have to add a translation step to try interpret the meaning of what I&amp;rsquo;m saying (do I mean add more users or add more time &lt;em&gt;per&lt;/em&gt; user?). If I tell you, &amp;ldquo;our mission is to take over the world&amp;rdquo;, you would be very justified is asking what the hell I was talking about.&lt;/p&gt;
&lt;p&gt;I get it - we have ideas in our minds and sometimes words can only capture the overall sense of what we&amp;rsquo;re trying to communicate, not the specifics. Language cannot perfectly convey ideas. And big thinkers, like the CEOs and leaders we all hope to become someday, tend to have so much experience (or think they do) that they shrink from describing a specific instance, and instead try to extract whatever fundamental idea they believe sums it up. These phrases are almost always universal truths that no one can deny but have no useful, actionable meaning. &lt;em&gt;Life is short&lt;/em&gt;. &lt;em&gt;Be kind&lt;/em&gt;. &lt;em&gt;Don&amp;rsquo;t be evil&lt;/em&gt;. Etc.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re trying to communicate something specifically, &lt;strong&gt;say it&lt;/strong&gt;. I think we underestimate how many of our words are lost in translation.&lt;/p&gt;
&lt;p&gt;My brain -&amp;gt; my words -&amp;gt; your ears -&amp;gt; your brain&lt;/p&gt;
&lt;p&gt;You need to make this journey as easy as possible.&lt;/p&gt;
&lt;p&gt;Unfortunately, because leaders tend to speak in generalities, people who want to become leaders speak the same way - except worse. They don&amp;rsquo;t have the background to know how to abstract meaning from experience. And good speakers can intercalate their general propositions (&amp;ldquo;healthcare is a right!&amp;quot;) with specific examples (&amp;ldquo;Jim had prostate cancer, and wasn&amp;rsquo;t insured, so he couldn&amp;rsquo;t get his medication in time to prevent his death&amp;rdquo;). Novices don&amp;rsquo;t have the anecdotes; the generalities are just shallow truth-speak and there&amp;rsquo;s nothing deeper.&lt;/p&gt;
&lt;p&gt;So what you end up with is a terrible word salad - a bunch of conceptual mumbo jumbo that no one, including the speaker, actually understands. The only thing I grasp from such moments is: 1) this person probably doesn&amp;rsquo;t know what they&amp;rsquo;re talking about, and 2) they want to look like they do.&lt;/p&gt;
&lt;p&gt;One of my favorite examples of this is from Richard Feynman, who describes reading a paper by a sociologist afflicted with the same syndrome:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So I stopped at random and read the next sentence very carefully. I can&amp;rsquo;t remember it precisely, but it was very close to this: &amp;ldquo;The individual member of the social community often receives his information via visual, symbolic channels.&amp;rdquo; I went back and forth over it, and translated. You know what it means? &amp;ldquo;People read.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I see smaller forms of this pretty much everywhere. People will have a bickering, long discussion about, ultimately, the definition of a sophisticated sounding word. Sometimes they&amp;rsquo;ll even invent the word! There&amp;rsquo;s nothing like a neologism to make you sound clever. And because it hasn&amp;rsquo;t been defined yet, you get to bend the language to the actions you want to take, rather than the other way around.&lt;/p&gt;
&lt;p&gt;My solution to this is to always add a translation step whenever I think someone is being unclear, and repeat it back to them. Here&amp;rsquo;s an example of a typical dialogue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Them: We want to build a structured mechanism by which users can ingest their own data into the existing infrastructure&lt;/li&gt;
&lt;li&gt;Me: Gotcha, so you want to create a form that can add rows to this dataset.&lt;/li&gt;
&lt;li&gt;Them: Not only that, but we also want to productize the workflow so that other people can easily compound on it.&lt;/li&gt;
&lt;li&gt;Me: Ok, agreed, we need to make the form easy to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you see, I keep a specific example, ideally of what we plan to do in the short term, constantly in discussion. If we&amp;rsquo;re begin to veer off and talk about what this will look like in the next 6-9 months, I stop the conversation, politely. I don&amp;rsquo;t mind planning, but most people are terrible at planning and really good at playing out vague fantasy escapades. It would be one thing if the fantasy escapades had even a 50% likelihood of coming to pass. They never do. People who have the diligence to plan out a new project a year in advance don&amp;rsquo;t have the foresight to realize how much will change after the first 2 months. Planning is less and less useful the farther out you project, and at some point your variance in outcomes is beyond what can be feasibly predicted. No plan survives the first battle, as they say.&lt;/p&gt;
&lt;p&gt;What I&amp;rsquo;ve found is, conveniently, once I&amp;rsquo;ve translated from vague nonsense to understandable language, people can begin to engage and provide feedback. They poke and prod and iterate. In other words, we can actually build the thing. Victory.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1] Feynman, &amp;ldquo;Surely You&amp;rsquo;re Joking Mr. Feynman!&amp;rdquo;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>A Modern Olympia Academy</title>
      <link>https://ssaraf.com/olympia_academy/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/olympia_academy/</guid>
      <description>&lt;p&gt;At work I get the pleasure of being able to have direct discussions with remarkably smart people. How are our conversations different from normal conversations, say with acquaintances? They appear to be oriented towards truth finding rather than opinion sermoning.&lt;/p&gt;
&lt;p&gt;It takes a degree of humility to say that you don&amp;rsquo;t know the answer to something. Certainly if I look over my social media today, the people who are most confident in what they believe tend not to be the brightest, or the most knowledgeable. They display the classic &lt;a href=&#34;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&#34;&gt;Dunning-Kruger effect&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If one looks closely at lunar dust, one finds that it is far more jagged than anything one can find on earth - the moon has no atmosphere, no flowing water, so it has nothing to erode the sharp edges away. Perhaps the same effect is happening here; the sharpest opinions have no softening, no blunting, because they no longer run into the obstacles they once did.&lt;/p&gt;
&lt;p&gt;Throughout history, we can see examples of places where people could sit together and speak frankly - that is to say, they could speak honestly without the fear of repercussions, and get feedback. Paris had its salons, Martha Washington hosted gatherings of noted politicians, even Einstein had a small group of people with whom he could hash out ideas.&lt;/p&gt;
&lt;p&gt;There are a couple of factors that appear to define success for these discussion groups:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;lack of judgment - people were allowed to discuss the topic at hand without worrying about whether the people in the room would judge them for the opinion they were espousing. The focus was to find what was true, not to say what was politically correct or convenient. One could comfortably espouse whatever belief one had, or even a devil&amp;rsquo;s advocate position, without worrying about getting tarred and feathered.&lt;/li&gt;
&lt;li&gt;the ability to change one&amp;rsquo;s mind - because the goal was to find the truth (and not just &amp;ldquo;debate&amp;rdquo;) it would be not only acceptable, but spectacular, to argue one side and eventually get convinced of the other side.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My contention is that there is &lt;strong&gt;no place on the internet where such discussion groups can be easily found&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Increasingly, I find a tremendous amount of hassle in current online discussions. I don&amp;rsquo;t have particularly controversial beliefs (though I suppose everyone believes this), and yet I have to be extraordinarily careful in how I phrase things to make sure it can&amp;rsquo;t be misinterpreted, taken out of context, etc. The inertia to maintain perfect political correctness is enough that it&amp;rsquo;s usually easier not to say anything at all.&lt;/p&gt;
&lt;p&gt;More importantly, the most radical sides of any particular debate do not have qualms about being perceived as -ist or -ian and therefore speak all the more loudly. And since one can&amp;rsquo;t engage with them in an effective way, others who are less perceptive read the more radical perspectives and begin to believe it, so it propagates&amp;hellip;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll notice that I don&amp;rsquo;t actually reference a specific issue here. I don&amp;rsquo;t have to. You already think you know what I&amp;rsquo;m referring to, don&amp;rsquo;t you? I can promise you that I&amp;rsquo;m not talking about any issue specifically - I&amp;rsquo;m simply abstracting up a level so that we can engage on the meta point (a trick I learned from Paul Graham, &lt;a href=&#34;http://www.paulgraham.com/say.html&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I suspect there may be a solution, in software. There are a few well established ways of allowing for open ideas in an online community (anonymity, deleting postings after a certain window of time) and also forcing some degree of civility (talking to your real life friends). The question is whether the two can be hybridized to build a trusting, open atmosphere.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Human knowledge</title>
      <link>https://ssaraf.com/human_knowledge/</link>
      <pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ssaraf.com/human_knowledge/</guid>
      <description>&lt;p&gt;It took Newton the better part of 3 years to &amp;lsquo;invent&amp;rsquo; calculus. [1] He is considered to be one of the brightest mathematical minds to have ever lived. Yet most 17 year olds today are capable of mastering the same calculus he did. Why is that?&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s almost too obvious to say - it&amp;rsquo;s easier to learn something than it is to imagine it. More interestingly, there seems to be a kind of inflation with learning. The best high school students today might learn calculus at 15, rather than 17. And &amp;lsquo;best&amp;rsquo; in this instance actually seems to describe the school, rather than the student. It&amp;rsquo;s been well established that school quality is a far better predictor of academic success than anything else. [2]&lt;/p&gt;
&lt;p&gt;So it&amp;rsquo;s not about how much horsepower your brain has. If subjects are taught to you in the right way, you&amp;rsquo;ll be able to master more difficult concepts than your parents did, at a younger age - both because of this inflation effect and because more will have been discovered by the time you get there.&lt;/p&gt;
&lt;p&gt;Anecdotally, there always seem to be folks who learn things far younger than others in their generation. For them, the general quality that sets them apart seems to be their precociousness, not their intelligence. Younger students often lack the discipline to focus for more advanced coursework. Once they gain the grit and work ethic of adults, it&amp;rsquo;s hard to stop them.&lt;/p&gt;
&lt;p&gt;Thus it&amp;rsquo;s always been a big frustration to me when people say &amp;ldquo;I just can&amp;rsquo;t do math&amp;rdquo;. Barring a diagnosable mental deficiency, this is never true. Most often students struggle not because the material is difficult but because they lack the discipline to keep working at it or are thinking about it from the wrong perspective. It is alarming how often it is the latter - kids work a lot harder than we give them credit for. But teachers are often abysmally bad at teaching them the right paradigms, often because they never learned them correctly in the first place.&lt;/p&gt;
&lt;p&gt;The most common case I see of an incorrect paradigm is the student who leans on memorization to get through exams. Studies pretty clearly demonstrate that even with clever tricks like spaced repetition or mnemonics, long term recall for everyone is abysmally low. Relying on it to pass your test sounds good in the short term, but really it seems that you cut off the learning that other parts of your brain could be getting, like your reasoning skills. Perhaps that&amp;rsquo;s why absent minded professors have such bad memories. They don&amp;rsquo;t happen to have bad memories despite being able to reason well. They reason well &lt;em&gt;because&lt;/em&gt; they have bad memories. They didn&amp;rsquo;t have the crutch to lean on, so their muscles grew stronger.&lt;/p&gt;
&lt;p&gt;Some careers, like law or medicine, are so old fashioned they continue to teach as if memorizing lengthy material is necessary, even though practicing physicians and lawyers don&amp;rsquo;t remember the details from their licensing exams only a few years before. The paradigm they are really learning in medical school is a sense of what is &amp;ldquo;weirder than usual&amp;rdquo; and what isn&amp;rsquo;t. For symptoms that they don&amp;rsquo;t immediately recognize, they google it, like anyone else would. [3]&lt;/p&gt;
&lt;p&gt;That isn&amp;rsquo;t to say that paradigms are everything. There will always be some basic facts and theories that need to be learned by rote in any field. One also may have to hone specific technical skills. But nonetheless it appears that every subject has some kind of limiting reagent - a few concepts that, once students really grok, make the rest of the field feel like a simple extension of what one already knows.&lt;/p&gt;
&lt;p&gt;The broader question is whether one can pick up new paradigms even beyond the young age at which most of them are initially acquired. I would argue that yes you can, so long as you already have the paradigm of paradigms - that ultimately the person who created the knowledge was not a young person. Newton was capable of inventing calculus at an older age. So you must be capable of at least understanding it now.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t think you&amp;rsquo;re as smart as Newton was? Surely you&amp;rsquo;re not as dumb as an average 17 year old. Sandwiched between the two, there is virtually no concept across any subject of human knowledge that you are incapable of understanding. And your children will pick it up faster than you.&lt;/p&gt;
&lt;p&gt;The average length of a PhD is about 7 years. [4] Even that is an overestimate of the knowledge one needs to acquire, since the majority of that time is spent trying to cobble together something to contribute to the field. That means the entire body of human knowledge, visualized as a swimming pool, is only 7 years deep. The average human lifespan is &amp;gt;78 years. [5]&lt;/p&gt;
&lt;p&gt;The only reason you aren&amp;rsquo;t an expert at something new is because you haven&amp;rsquo;t had the discipline and the paradigms needed to get there. I&amp;rsquo;m not offering a solution to this. But I do expect that within my lifetime, the vast human potential for knowledge acquisition and usage will not stay as untapped as it currently is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt; to Otis Reid and Karthik Prasad for reading drafts and providing feedback.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1] The conflict between Newton and Leibniz is quite famous. But Fermat and other mathematicians discussed the principles of calculus long before both of them. In fact, Newton&amp;rsquo;s work is considered to be a new paradigm (along with a mathematical framework) on top of Fermat&amp;rsquo;s &amp;ldquo;theory of tangents&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;http://www.journals.uchicago.edu/doi/abs/10.1086/261805&#34;&gt;Card, &amp;ldquo;Does School Quality Matter&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] Good physicians don&amp;rsquo;t use wikipedia, but UptoDate and AccessMedicine are the medical equivalents, with proper citations. That said, you&amp;rsquo;d be frightened by how often wikipedia &lt;em&gt;is&lt;/em&gt; used.&lt;/p&gt;
&lt;p&gt;[4] The length of the average PhD appears to be decreasing in the past few years, which was quite surprising to me. &lt;a href=&#34;https://www.nsf.gov/statistics/2018/nsf18304/datatables/tab31.htm&#34;&gt;National Science Foundation, National Center for Science and Engineering Statistics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a href=&#34;https://academic.oup.com/gerontologist/article/55/6/901/2605490&#34;&gt;Crimmons, &amp;ldquo;Lifespan and Healthspan: Past, Present, and Promise&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
</description> 
    </item>
    
  </channel>
</rss>